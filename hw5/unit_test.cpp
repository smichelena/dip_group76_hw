//============================================================================
// Name        : unit_test.cpp
// Author      : Andreas Ley
// Version     : 1.0
// Copyright   : -
// Description : only calls processing and test routines
//============================================================================

#include "Dip5.h"

#include <array>
#include <iostream>
#include <vector>

using namespace std;

extern const std::uint64_t data_inputImage[];
extern const std::size_t data_inputImage_size;

union FloatInt {
  uint32_t i;
  float f;
};

inline bool fastmathIsFinite(float f) {
  FloatInt f2i;
  f2i.f = f;
  return ((f2i.i >> 23) & 0xFF) != 0xFF;
}

bool matrixIsFinite(const cv::Mat_<float> &mat) {

  for (unsigned r = 0; r < mat.rows; r++)
    for (unsigned c = 0; c < mat.cols; c++)
      if (!fastmathIsFinite(mat(r, c)))
        return false;

  return true;
}

bool checkMatricesMatchSilent(const cv::Mat_<float> &testMatrix,
                              const cv::Mat_<float> &expectedMatrix,
                              float eps) {
  if (!matrixIsFinite(testMatrix)) {
    return false;
  }
  if (testMatrix.cols != expectedMatrix.cols) {
    return false;
  }
  if (testMatrix.rows != expectedMatrix.rows) {
    return false;
  }

  for (unsigned i = 0; i < expectedMatrix.rows; i++)
    for (unsigned j = 0; j < expectedMatrix.cols; j++) {
      if (std::abs(testMatrix(i, j) - expectedMatrix(i, j)) > eps) {
        return false;
      }
    }

  return true;
}

bool checkMatricesMatch(const cv::Mat_<float> &testMatrix,
                        const cv::Mat_<float> &expectedMatrix,
                        const char *indent, float eps, unsigned border = 0) {
  if (!matrixIsFinite(testMatrix)) {
    std::cout << indent
              << "Matrix contains nan/inf values! Division by zero? "
                 "Log/sqrt/power of negative number?"
              << std::endl;
    return false;
  }
  if (testMatrix.cols != expectedMatrix.cols) {
    std::cout << indent << "Matrix has wrong number of columns! Got "
              << testMatrix.cols << " but expected " << expectedMatrix.cols
              << std::endl;
    return false;
  }
  if (testMatrix.rows != expectedMatrix.rows) {
    std::cout << indent << "Matrix has wrong number of rows! Got "
              << testMatrix.rows << " but expected " << expectedMatrix.rows
              << std::endl;
    return false;
  }

  for (unsigned i = border; i < expectedMatrix.rows - border; i++)
    for (unsigned j = border; j < expectedMatrix.cols - border; j++) {
      if (std::abs(testMatrix(i, j) - expectedMatrix(i, j)) > eps) {
        std::cout << indent
                  << "Given matrix values do not match the expected values! In "
                     "element "
                  << i << ',' << j << " got " << testMatrix(i, j)
                  << " but expected " << expectedMatrix(i, j) << std::endl;
        return false;
      }
    }

  return true;
}

bool test_createGaussianKernel1D() {
  std::cout << "==== test_createGaussianKernel1D() ====" << std::endl;
  bool ok = true;

  cv::Mat_<float> gaussian_2_5(1, 13);
  gaussian_2_5 << 0.00903789f, 0.0217894f, 0.0447649f, 0.0783688f, 0.116912f,
      0.148625f, 0.161003f, 0.148625f, 0.116912f, 0.0783688f, 0.0447649f,
      0.0217894f, 0.00903789f;
  cv::Mat_<float> gaussian_3_5(1, 19);
  gaussian_3_5 << 0.00420558f, 0.0084173f, 0.0155263f, 0.0263942f, 0.0413522f,
      0.0597084f, 0.0794547f, 0.0974431f, 0.110136f, 0.114724f, 0.110136f,
      0.0974431f, 0.0794547f, 0.0597084f, 0.0413522f, 0.0263942f, 0.0155263f,
      0.0084173f, 0.00420558f;

  std::cout << "    Testing createGaussianKernel1D with sigma=2.5" << std::endl;
  ok &= checkMatricesMatch(dip5::createGaussianKernel1D(2.5f), gaussian_2_5,
                           "         ", 1e-3f);
  std::cout << "    Testing createGaussianKernel1D with sigma=3.5" << std::endl;
  ok &= checkMatricesMatch(dip5::createGaussianKernel1D(3.5f), gaussian_3_5,
                           "         ", 1e-3f);

  if (ok)
    std::cout << "Test ok" << std::endl;
  else
    std::cout << "-----> Test failed" << std::endl;

  return ok;
}

bool test_separableFilter() {
  std::cout << "==== test_separableFilter() ====" << std::endl;
  bool ok = true;

  std::cout
      << "    Testing different image and kernel sizes to check for crashes"
      << std::endl;
  {
    std::vector<std::array<unsigned, 4>> sizes = {
        {64, 64, 3, 3},  {64, 64, 5, 5},  {16, 64, 5, 5},   {64, 16, 5, 5},
        {64, 64, 3, 31}, {64, 64, 31, 3}, {16, 16, 63, 63},
    };
    for (auto t : sizes) {
      std::cout << "        testing image size " << t[0] << 'x' << t[1]
                << " with kernel sizes " << t[2] << ',' << t[3] << std::endl;
      cv::Mat_<float> img = cv::Mat_<float>::zeros(t[0], t[1]);
      cv::Mat_<float> kernel1 = cv::Mat_<float>::zeros(1, t[2]);
      cv::Mat_<float> kernel2 = cv::Mat_<float>::zeros(1, t[3]);
      cv::Mat_<float> result = dip5::separableFilter(img, kernel1, kernel2);
      if (!matrixIsFinite(result)) {
        std::cout << "             Output matrix contains nan/inf values. Out "
                     "of bounds access?"
                  << std::endl;
        ok = false;
      }
    }
  }
  std::cout << "    Testing x kernel usage" << std::endl;
  {
    cv::Mat_<float> img(128, 64);
    cv::randn(img, 128.0f, 16.0f);
    cv::Mat_<float> imgCopy = img.clone();

    cv::Mat_<float> one(1, 1);
    one(0, 0) = 1.0f;
    cv::Mat_<float> factor(1, 1);
    factor(0, 0) = 2.5f;

    cv::Mat_<float> result = dip5::separableFilter(img, factor, one);
    if (!checkMatricesMatchSilent(img, imgCopy, 1e-8f)) {
      std::cout << "        It seems the input image is being overwritten."
                << std::endl;
      ok = false;
    }

    ok &= checkMatricesMatch(result, imgCopy * 2.5f, "         ", 1e-8f);
  }
  std::cout << "    Testing y kernel usage" << std::endl;
  {
    cv::Mat_<float> img(128, 64);
    cv::randn(img, 128.0f, 16.0f);
    cv::Mat_<float> imgCopy = img.clone();

    cv::Mat_<float> one(1, 1);
    one(0, 0) = 1.0f;
    cv::Mat_<float> factor(1, 1);
    factor(0, 0) = 1.5f;

    cv::Mat_<float> result = dip5::separableFilter(img, one, factor);
    if (!checkMatricesMatchSilent(img, imgCopy, 1e-8f)) {
      std::cout << "        It seems the input image is being overwritten."
                << std::endl;
      ok = false;
    }

    ok &= checkMatricesMatch(result, imgCopy * 1.5f, "         ", 1e-8f);
  }
  std::cout << "    Testing negative outputs" << std::endl;
  {
    cv::Mat_<float> img(128, 64);
    cv::randn(img, 128.0f, 16.0f);
    cv::Mat_<float> imgCopy = img.clone();

    cv::Mat_<float> one(1, 1);
    one(0, 0) = 1.0f;
    cv::Mat_<float> factor(1, 1);
    factor(0, 0) = -1.5f;

    cv::Mat_<float> result = dip5::separableFilter(img, one, factor);
    if (!checkMatricesMatchSilent(img, imgCopy, 1e-8f)) {
      std::cout << "        It seems the input image is being overwritten."
                << std::endl;
      ok = false;
    }

    ok &= checkMatricesMatch(result, imgCopy * -1.5f, "         ", 1e-8f);
  }
  std::cout << "    Testing simple box filter" << std::endl;
  {
    cv::Mat input = cv::Mat::ones(9, 9, CV_32FC1);
    input.at<float>(4, 4) = 255;
    cv::Mat kernel = cv::Mat(1, 3, CV_32FC1, 1. / 3.);

    cv::Mat_<float> output = dip5::separableFilter(input, kernel, kernel);

    cv::Mat_<float> ref(9, 9);
    ref << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,
        1, 1, 1, 0, 0, 1, 1, (8 + 255) / 9., (8 + 255) / 9., (8 + 255) / 9., 1,
        1, 0, 0, 1, 1, (8 + 255) / 9., (8 + 255) / 9., (8 + 255) / 9., 1, 1, 0,
        0, 1, 1, (8 + 255) / 9., (8 + 255) / 9., (8 + 255) / 9., 1, 1, 0, 0, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0;

    ok &= checkMatricesMatch(output, ref, "         ", 1e-5f, 1);
  }
  std::cout << "    Testing pattern" << std::endl;
  {
    cv::Mat_<float> img(24, 16);
    img << 127.0f, 137.121f, 82.1406f, 99.5699f, 206.279f, 109.207f, 85.5025f,
        146.53f, 159.961f, 53.7172f, 176.27f, 124.028f, 210.578f, 1.58023f,
        5.45029f, 92.6168f, 79.1095f, 248.376f, 144.539f, 38.6669f, 225.339f,
        76.6731f, -31.3911f, 27.9328f, 39.5748f, 122.952f, 213.506f, 178.143f,
        110.174f, 93.6557f, 244.311f, 150.459f, 209.69f, 85.9414f, 71.8769f,
        195.774f, 130.083f, 109.226f, 117.116f, 103.399f, 194.174f, 157.369f,
        119.971f, 192.792f, 79.1698f, 88.0458f, 113.387f, 201.328f, 0.821442f,
        171.668f, 113.145f, 133.273f, 143.813f, 73.4041f, 168.536f, 116.165f,
        233.557f, 108.653f, 75.6931f, 172.417f, 165.018f, 170.922f, 95.8754f,
        89.8785f, 134.977f, 65.6635f, 65.68f, 201.931f, 168.345f, 150.438f,
        52.055f, 212.079f, 208.761f, 218.731f, 94.7339f, 58.3827f, 198.012f,
        158.646f, 69.4748f, 92.4837f, 119.614f, 66.2861f, 160.465f, 134.34f,
        129.211f, 64.822f, 182.214f, 207.437f, 78.2321f, 162.624f, 273.075f,
        292.529f, 233.919f, 120.699f, 202.628f, 0.157883f, 203.421f, 135.018f,
        218.398f, 35.0472f, 130.223f, 186.591f, 82.628f, 27.8944f, 38.487f,
        46.6264f, 55.5597f, 131.698f, 149.656f, 103.16f, 116.966f, 148.454f,
        157.639f, 142.447f, 150.913f, 134.322f, 191.703f, 132.115f, -16.0513f,
        38.7217f, 46.0399f, 109.498f, 168.588f, 137.294f, 72.4044f, 138.973f,
        144.598f, 35.0224f, 143.955f, 83.0707f, 208.145f, 121.172f, 161.83f,
        128.831f, 142.886f, 163.082f, 16.2912f, 178.123f, 122.231f, 22.8339f,
        -15.8007f, 151.686f, 155.579f, 213.467f, 153.382f, 107.841f, -24.2338f,
        121.81f, 47.2682f, 240.052f, 149.957f, 112.416f, 145.203f, 85.1778f,
        208.651f, 98.9521f, 9.86027f, 104.682f, 198.888f, 176.65f, 132.15f,
        107.852f, 53.5667f, 42.5622f, 214.072f, 137.824f, 165.36f, 159.152f,
        109.075f, 151.652f, 133.572f, 125.357f, 152.472f, 98.2442f, 100.275f,
        39.4998f, 245.435f, -29.284f, 83.7655f, 109.159f, 249.138f, 146.387f,
        141.18f, 93.8499f, 187.519f, 59.9691f, 169.392f, 160.109f, -19.0415f,
        264.433f, 173.608f, 283.457f, 211.906f, 148.92f, 97.1547f, 127.162f,
        82.2779f, 91.813f, 129.46f, 136.693f, 157.074f, 118.226f, 132.653f,
        144.407f, 178.843f, 111.47f, 68.8635f, 54.0935f, 116.332f, 148.164f,
        70.648f, 120.378f, 122.847f, 15.6141f, 200.185f, 104.484f, 203.374f,
        112.353f, 118.673f, 161.106f, 207.877f, 146.258f, 189.116f, 89.1468f,
        143.853f, 105.625f, 130.843f, 192.053f, 106.585f, 162.874f, 77.9815f,
        187.928f, 226.152f, -69.4203f, 82.8693f, 186.736f, 246.954f, 31.5533f,
        201.686f, 129.036f, 137.574f, 84.8246f, 85.3754f, 192.164f, 134.302f,
        71.3544f, 59.0667f, 75.8961f, 202.288f, 207.362f, 311.479f, 145.729f,
        115.604f, 51.7323f, 62.4731f, 205.334f, 50.4869f, 98.4561f, 233.55f,
        136.592f, 176.42f, 77.368f, 205.122f, 148.909f, 4.67548f, 157.917f,
        131.359f, 109.093f, 185.788f, 126.007f, 40.9165f, 164.38f, 48.8959f,
        105.653f, 197.093f, 131.037f, 92.4296f, 112.128f, 120.565f, 202.735f,
        96.6869f, 195.158f, 122.222f, 136.424f, 88.7428f, 155.68f, 282.988f,
        146.148f, 23.4647f, 115.589f, 129.12f, 71.2802f, 226.755f, 84.9808f,
        32.9316f, 78.3571f, 182.26f, 8.95589f, 129.812f, 230.043f, 74.5426f,
        87.9193f, 140.872f, 151.647f, 125.568f, 96.7696f, 112.586f, 198.183f,
        126.999f, 170.979f, 235.626f, 154.668f, 185.939f, 104.853f, 170.976f,
        30.9636f, 234.583f, 183.941f, 136.613f, 178.784f, 76.8308f, 126.515f,
        228.4f, 188.699f, 45.1968f, 104.29f, 157.767f, 172.904f, 209.77f,
        71.1727f, 66.9771f, 227.373f, 117.194f, 166.036f, 93.9891f, 140.55f,
        125.089f, 272.776f, 107.34f, 177.72f, 97.4294f, 79.6268f, 120.161f,
        105.604f, 166.506f, 59.6731f, 265.915f, 142.912f, 118.773f, 47.2225f,
        91.5605f, 66.6006f, 114.977f, 321.006f, 160.144f, 26.5979f, 197.9f,
        106.528f, 90.7999f, 112.865f, 77.048f, 55.7845f, 10.7636f, 209.817f,
        109.575f, 119.247f, 159.108f, 158.642f, 67.1481f, 187.941f, 138.629f,
        128.824f, -29.6137f, 179.97f, 154.1f, 168.699f, 93.1795f, 18.0039f,
        167.594f, 183.975f, 20.9823f, 178.264f, 63.0869f, 139.8f;
    cv::Mat_<float> kernel1(1, 5);
    kernel1 << 1.78778f, 0.845253f, -1.76418f, -0.930368f, 0.168247f;
    cv::Mat_<float> kernel2(1, 7);
    kernel2 << -0.758556f, 1.03746f, 0.155894f, 0.736385f, 0.737945f, 2.22635f,
        -0.517541f;
    cv::Mat_<float> expectedResult(24, 16);
    expectedResult << -745.895f, -258.392f, 863.669f, 421.984f, -796.367f,
        -235.727f, 651.1f, -96.2923f, 47.6203f, 540.575f, 239.584f, -926.078f,
        -1319.57f, 421.471f, 1157.23f, 302.266f, 490.086f, -552.49f, 271.934f,
        387.601f, -596.352f, -226.948f, 494.858f, -93.5587f, 44.4967f, 811.447f,
        459.441f, -806.997f, -983.176f, 180.149f, 549.634f, 124.895f, -294.534f,
        -226.716f, 800.071f, 404.824f, -1008.99f, -471.499f, 946.469f, 467.899f,
        -341.636f, -253.944f, 209.352f, -77.2638f, -657.844f, 244.81f, 897.67f,
        305.938f, 662.733f, -225.393f, 220.306f, -120.926f, -901.614f,
        -24.7878f, 560.728f, 588.513f, 892.353f, 729.743f, -342.796f, -820.562f,
        411.296f, 285.786f, -754.447f, -340.141f, -736.708f, 425.776f, 482.28f,
        -180.523f, 166.65f, 240.943f, 395.637f, 254.63f, -798.911f, -273.519f,
        626.355f, -4.95836f, -557.675f, 262.803f, 856.888f, 347.589f, 775.332f,
        155.748f, 230.57f, -91.7737f, -442.369f, 60.074f, 693.442f, 272.07f,
        -329.887f, 319.735f, 821.323f, 108.281f, -673.542f, -1167.61f,
        -970.813f, -224.924f, -191.707f, 665.081f, 423.473f, -165.099f,
        -727.015f, 108.825f, 421.581f, 228.457f, 149.509f, -556.351f, 56.4266f,
        645.397f, -220.349f, -498.951f, -94.2316f, 55.6027f, -63.8351f,
        196.446f, -245.749f, -96.312f, 328.027f, 86.5466f, -509.421f, -293.171f,
        1179.81f, 1452.3f, -270.612f, -1045.54f, 255.769f, 87.7515f, -936.215f,
        -399.835f, 180.274f, -606.306f, -514.5f, 768.831f, 49.0663f, -980.2f,
        -655.38f, 186.599f, 425.727f, 37.9992f, 265.364f, 232.911f, -46.6759f,
        99.1958f, 89.3138f, 15.4798f, -562.796f, 282.958f, 920.448f, 489.988f,
        -834.32f, -917.862f, -7.70101f, 363.567f, 817.689f, 353.819f, -1295.46f,
        -163.061f, 1572.99f, 512.259f, -346.126f, -34.309f, -469.216f, 57.6978f,
        180.584f, 436.559f, 387.971f, 133.808f, -523.987f, -312.707f, 486.317f,
        -321.443f, -1088.56f, 155.438f, 964.853f, 691.373f, 503.47f, 225.657f,
        -1320.06f, -559.806f, 922.499f, 963.676f, 609.972f, -209.488f,
        -272.382f, 183.807f, 374.57f, 154.115f, -829.508f, -236.02f, 942.399f,
        365.092f, -207.76f, -24.5949f, -645.106f, -279.041f, 704.29f, 706.077f,
        -80.0296f, 112.981f, 175.808f, -699.1f, -744.825f, 470.261f, 1038.45f,
        156.76f, -362.305f, -481.999f, -556.163f, -172.87f, -1648.48f, 256.304f,
        1196.23f, 79.8694f, -532.115f, -281.341f, 873.592f, 459.583f, -178.718f,
        411.567f, -585.909f, -322.322f, 870.025f, 688.867f, 518.367f, 283.889f,
        -202.918f, -133.442f, -101.312f, -457.229f, 159.448f, 617.124f,
        200.955f, -313.272f, -231.096f, 357.524f, 1039.27f, -75.1442f,
        -1419.17f, -636.303f, 166.437f, 64.931f, 91.3003f, 335.834f, 85.0364f,
        -642.352f, 169.438f, 834.842f, 383.619f, -4.95502f, -149.669f, -47.167f,
        379.492f, 69.9154f, 131.659f, 160.443f, -397.535f, -228.55f, 471.122f,
        582.581f, 181.334f, -185.885f, -778.281f, -143.995f, 981.152f,
        -433.268f, -687.879f, 1240.66f, 924.154f, -1103.2f, -638.505f, 843.369f,
        565.724f, 23.8443f, 19.0778f, 580.558f, 600.85f, -312.714f, -404.054f,
        46.8838f, 135.334f, 821.419f, 1349.47f, -434.879f, -1267.07f, -206.192f,
        -16.998f, 507.957f, 980.933f, 351.694f, 1574.84f, 983.032f, -448.65f,
        -466.236f, 222.169f, 597.582f, -441.269f, -660.659f, -129.232f,
        310.965f, 707.805f, 400.255f, -193.228f, -31.9555f, 378.343f, 232.686f,
        646.53f, 643.132f, -136.587f, -473.821f, 68.4824f, 498.1f, 524.844f,
        -23.8606f, 58.6165f, 114.026f, -485.107f, -234.678f, 831.14f, 386.024f,
        -587.189f, -273.146f, 760.07f, -228.777f, 338.857f, 305.787f, -880.847f,
        -461.736f, 804.886f, -21.1197f, -778.29f, 823.041f, 948.465f, -499.838f,
        -350.992f, 419.604f, 404.404f, 118.096f, 207.777f, 376.341f, -183.099f,
        -416.743f, 732.976f, 572.83f, -189.594f, -494.774f, -152.759f,
        -30.4279f, 196.5f, 580.066f, -151.921f, -316.512f, 253.275f, 183.091f,
        1111.07f, -27.3755f, -1022.97f, -612.31f, 319.853f, 577.683f, 421.309f,
        -459.458f, -697.922f, 962.71f, 588.685f, -629.061f, -246.553f, 103.271f,
        170.368f, 142.06f, 545.577f, -891.831f, -628.513f, -36.3573f, 217.344f,
        195.879f, 28.7014f, -441.331f, 416.148f, 1058.42f, -383.518f, -862.649f,
        -61.8739f, 180.835f, 84.9961f, 40.3905f;

    cv::Mat_<float> result = dip5::separableFilter(img, kernel1, kernel2);

    ok &= checkMatricesMatch(result, expectedResult, "         ", 1e-1f, 3);
  }

  if (ok)
    std::cout << "Test ok" << std::endl;
  else
    std::cout << "-----> Test failed" << std::endl;

  return ok;
}

bool test_createFstDevKernel1D() {
  std::cout << "==== test_createFstDevKernel1D() ====" << std::endl;
  bool ok = true;

  cv::Mat_<float> gaussianDeriv_2_5(1, 13);
  gaussianDeriv_2_5 << 0.0282496f, 0.0567557f, 0.0932807f, 0.122478f, 0.12181f,
      0.0774257f, -0.0f, -0.0774257f, -0.12181f, -0.122478f, -0.0932807f,
      -0.0567557f, -0.0282496f;
  cv::Mat_<float> gaussianDeriv_3_5(1, 19);
  gaussianDeriv_3_5 << 0.013903f, 0.0247346f, 0.0399215f, 0.0581705f, 0.075947f,
      0.0877278f, 0.0875554f, 0.0715852f, 0.040455f, -0.0f, -0.040455f,
      -0.0715852f, -0.0875554f, -0.0877278f, -0.075947f, -0.0581705f,
      -0.0399215f, -0.0247346f, -0.013903f;

  auto scaleLike = [](const char *indent, cv::Mat_<float> &matrix,
                      const cv::Mat_<float> &ref) -> bool {
    float scale = cv::sum(cv::abs(ref))[0];
    if (scale < 1e-3f) {
      std::cout << indent << "Kernel values overall too small" << std::endl;
      return false;
    }
    matrix *= scale;
    return true;
  };
  cv::Mat_<float> testKernel;

  std::cout << "    Testing createFstDevKernel1D with sigma=2.5" << std::endl;
  testKernel = dip5::createFstDevKernel1D(2.5f);
  ok &= scaleLike("        ", gaussianDeriv_2_5, testKernel);
  ok &= checkMatricesMatch(testKernel, gaussianDeriv_2_5, "        ", 1e-3f);
  std::cout << "    Testing createFstDevKernel1D with sigma=3.5" << std::endl;
  testKernel = dip5::createFstDevKernel1D(3.5f);
  ok &= scaleLike("        ", gaussianDeriv_3_5, testKernel);
  ok &= checkMatricesMatch(testKernel, gaussianDeriv_3_5, "        ", 1e-3f);

  if (ok)
    std::cout << "Test ok" << std::endl;
  else
    std::cout << "-----> Test failed" << std::endl;

  return ok;
}

float getDerivativeScalingFactor(float sigma) {
  cv::Mat_<float> kernel = dip5::createFstDevKernel1D(sigma);
  return cv::sum(cv::abs(kernel))[0];
}

bool test_calculateDirectionalGradients() {
  std::cout << "==== test_calculateDirectionalGradients() ====" << std::endl;
  bool ok = true;

  cv::Mat_<float> img(12, 10);
  img << 32.0f, 33.2651f, 26.3926f, 28.5712f, 41.9099f, 29.7759f, 26.8128f,
      34.4413f, 36.1201f, 22.8396f, 38.1588f, 31.6285f, 42.4473f, 16.3225f,
      16.8063f, 27.7021f, 26.0137f, 47.1719f, 34.1924f, 20.9584f, 44.2924f,
      25.7091f, 12.2011f, 19.6166f, 21.0718f, 31.494f, 42.8133f, 38.3929f,
      29.8967f, 27.832f, 46.6638f, 34.9323f, 42.3362f, 26.8677f, 25.1096f,
      40.5968f, 32.3854f, 29.7782f, 30.7645f, 29.0499f, 40.3967f, 35.7961f,
      31.1214f, 40.224f, 26.0212f, 27.1307f, 30.2984f, 41.291f, 16.2277f,
      37.5835f, 30.2681f, 32.7841f, 34.1016f, 25.3005f, 37.192f, 30.6456f,
      45.3197f, 29.7067f, 25.5866f, 37.6771f, 36.7523f, 37.4903f, 28.1094f,
      27.3598f, 32.9971f, 24.3329f, 24.335f, 41.3664f, 37.1681f, 34.9297f,
      22.6319f, 42.6348f, 42.2201f, 43.4664f, 27.9667f, 23.4228f, 40.8765f,
      35.9558f, 24.8094f, 27.6855f, 31.0767f, 24.4108f, 36.1831f, 32.9175f,
      32.2764f, 24.2278f, 38.9018f, 42.0546f, 25.904f, 36.4529f, 50.2594f,
      52.6911f, 45.3649f, 31.2124f, 41.4535f, 16.1447f, 41.5527f, 33.0023f,
      43.4248f, 20.5059f, 32.4029f, 39.4488f, 26.4535f, 19.6118f, 20.9359f,
      21.9533f, 23.07f, 32.5872f, 34.832f, 29.02f, 30.7457f, 34.6818f, 35.8299f,
      33.9309f, 34.9891f, 32.9152f, 40.0879f, 32.6394f, 14.1186f, 20.9652f;
  cv::Mat_<float> expectedResult_0_5_X(12, 10);
  expectedResult_0_5_X << 0.217413f, -2.27672f, -2.91206f, 5.56685f, 1.1442f,
      -6.25426f, 3.12108f, 4.59355f, -6.57896f, -6.63776f, -3.49185f,
      -0.320098f, -6.59722f, -8.79079f, 5.17445f, 3.97688f, 8.27708f, 3.02606f,
      -11.4951f, -6.02469f, -8.28488f, -12.6298f, -3.64194f, 1.20772f, 6.01081f,
      9.43289f, 3.17536f, -4.73334f, -5.5904f, -1.60855f, -5.85089f, -3.90581f,
      -3.26203f, -6.57774f, 5.33757f, 4.24856f, -3.13557f, -2.07498f, -1.04643f,
      0.352618f, -2.30105f, -3.6761f, 0.914325f, -2.75967f, -4.13633f, 2.50333f,
      4.94583f, -6.6739f, -1.0732f, 8.95592f, 0.784318f, 0.554238f, -3.24841f,
      1.20474f, 1.2448f, 2.96467f, 1.29171f, -7.83072f, 2.59611f, 5.7756f,
      1.48961f, -2.15361f, -4.34051f, 1.3288f, -1.9738f, -2.28816f, 7.31996f,
      3.14325f, -2.54874f, -0.0837602f, 7.55534f, 7.51951f, 0.240735f,
      -5.55637f, -8.51095f, 4.97143f, 6.78805f, -6.33107f, -3.89539f, 1.57429f,
      -1.42828f, 2.79182f, 2.2478f, -2.5046f, -5.28914f, 3.29982f, 8.57987f,
      -5.87047f, -3.3101f, 3.08358f, 0.977103f, -1.97083f, -9.05509f, -2.04099f,
      -6.26709f, 0.505492f, 8.14895f, 0.670856f, -5.40551f, -8.76616f, 3.11164f,
      -2.33094f, -8.98954f, -2.42421f, 0.0648721f, 1.11656f, 5.0674f, 3.34503f,
      -2.69085f, -3.14291f, 2.13366f, 1.95449f, -1.39187f, -0.669423f,
      -0.329051f, 2.39151f, 0.443066f, -10.9753f, -5.40536f, 2.74919f;
  cv::Mat_<float> expectedResult_0_5_Y(12, 10);
  expectedResult_0_5_Y << 2.66426f, 0.53898f, 5.57796f, -5.30167f, -10.6408f,
      -2.19545f, 0.253061f, 4.8642f, -0.180777f, -0.943116f, 5.08921f,
      -3.07434f, -6.46348f, -5.38903f, -8.58501f, 0.418436f, 6.598f, 2.07558f,
      -1.97256f, 1.89888f, 3.97555f, 1.74702f, 0.693802f, 4.58571f, 4.51555f,
      5.85547f, 2.26764f, -6.68755f, -1.84423f, 3.43231f, -1.20322f, 4.76927f,
      9.07956f, 9.37999f, 2.8126f, -2.11981f, -5.00254f, -0.254002f, -4.70504f,
      3.62854f, -7.43913f, -2.15697f, -3.43812f, -0.411759f, 4.14094f,
      -2.58351f, 4.55579f, 0.384906f, -1.58184f, 3.57845f, -1.53791f, 0.312162f,
      -1.78001f, -4.85086f, 1.91091f, -1.04699f, -2.49153f, 0.827251f, 8.1026f,
      -0.0704079f, -2.88687f, 3.9019f, 4.68658f, 7.08921f, -3.04731f, -3.57f,
      -1.80021f, 2.18097f, -0.505159f, -4.50514f, -3.23207f, -5.01899f,
      2.77636f, 2.57847f, 0.00675869f, 0.69596f, 5.76297f, 0.446672f, -4.31458f,
      0.0806332f, 12.878f, 5.59579f, 1.12041f, -3.93617f, 4.2668f, -2.10966f,
      -0.278799f, -0.134832f, 6.78541f, -2.21611f, 1.39329f, 5.46986f,
      -3.73627f, -6.35774f, -5.2921f, -2.342f, -6.855f, -4.093f, 2.61311f,
      -2.84521f, -9.6767f, -8.63346f, -4.56626f, 0.217672f, -1.50583f, 6.17681f,
      0.297392f, -1.78146f, -11.5266f, -1.35546f, -0.99419f, -1.46472f,
      4.19821f, 6.88216f, 6.87616f, 5.96808f, 7.28298f, -0.176264f, -8.57676f,
      -4.70149f;
  cv::Mat_<float> expectedResult_0_75_X(12, 10);
  expectedResult_0_75_X << -0.560244f, -2.16255f, -2.93236f, 2.60512f, 1.40589f,
      -3.34434f, 3.45429f, 3.41164f, -6.75635f, -6.65256f, -3.63139f, -3.79021f,
      -5.57781f, -3.75362f, 3.8859f, 4.07506f, 6.22213f, 1.23766f, -8.75756f,
      -5.8231f, -7.1728f, -8.95912f, -4.99972f, -1.7753f, 5.74752f, 7.65569f,
      3.14739f, -2.77888f, -5.75152f, -2.58051f, -5.67847f, -5.92822f, -3.4105f,
      -3.67248f, 3.27149f, 4.70578f, -0.205124f, -3.33126f, -1.88482f, 1.21341f,
      -2.42414f, -2.85353f, -1.25397f, -2.6981f, -1.15257f, 2.72825f, 1.953f,
      -5.05246f, -0.198061f, 5.91668f, 0.171434f, -1.01136f, -2.3762f,
      0.118223f, -0.0492915f, 1.95205f, 2.33823f, -4.34386f, 0.802809f,
      4.78281f, 2.28787f, 0.110929f, -2.88936f, -0.710615f, -2.25288f,
      0.492327f, 5.22901f, -0.105146f, -1.52406f, 0.905712f, 4.72387f, 4.78215f,
      -0.0176195f, -4.07823f, -5.92279f, 2.94566f, 6.24061f, -3.43458f,
      -3.46417f, 0.96433f, 0.997592f, 2.56951f, -0.217153f, -3.43961f,
      -5.39333f, 2.99858f, 6.9652f, -3.70686f, -3.89052f, 0.0174183f, 0.616997f,
      -1.80176f, -6.51866f, -3.3611f, -4.39968f, 1.32954f, 6.89472f, 0.430036f,
      -4.59901f, -5.3803f, 2.058f, -1.92572f, -7.14473f, -2.85789f, -1.15972f,
      1.51101f, 4.36702f, 0.301761f, -3.63258f, -3.23936f, 2.17019f, 1.06626f,
      -2.2637f, -1.18862f, -0.0669377f, 2.03473f, 0.252828f, -8.05135f,
      -5.18564f, 0.986629f;
  cv::Mat_<float> expectedResult_0_75_Y(12, 10);
  expectedResult_0_75_Y << 2.48158f, 1.44274f, 1.60143f, -4.51845f, -7.90883f,
      -2.9821f, 1.22631f, 2.95044f, 0.5105f, -0.578915f, 4.03585f, -1.45048f,
      -4.44241f, -5.54971f, -5.95411f, 0.0988991f, 4.34393f, 1.77404f,
      -0.597017f, 1.32203f, 3.60727f, 1.98083f, 1.75197f, 3.58724f, 3.84434f,
      4.14138f, 1.22492f, -3.62562f, -1.93816f, 2.70577f, -0.576254f, 3.73237f,
      7.25008f, 7.59995f, 3.58978f, -0.971522f, -2.67839f, -2.20746f, -2.25252f,
      2.63633f, -5.95538f, -2.49264f, -1.52806f, 0.549779f, 2.14003f,
      -0.243018f, 1.46696f, 0.666214f, 0.11588f, 2.83505f, -2.1034f, -0.432755f,
      -1.45308f, -2.065f, 0.158397f, -1.02656f, -1.34213f, 1.63668f, 4.46386f,
      0.981487f, -2.15065f, 1.97577f, 4.38636f, 4.05518f, -1.00003f, -2.73884f,
      -0.93262f, 1.10851f, -0.321147f, -3.31605f, -1.90044f, -1.73839f,
      1.85356f, 2.32043f, 0.536983f, 0.891178f, 3.12731f, 0.752759f, -1.93698f,
      -1.12623f, 10.0989f, 5.37889f, 0.651634f, -1.68166f, 0.770774f, -0.71188f,
      -0.813728f, 0.725495f, 3.05334f, -0.961976f, 2.0923f, 2.3893f, -2.59996f,
      -5.34592f, -4.09501f, -2.91321f, -4.78837f, -3.19749f, -0.180648f,
      -2.16525f, -8.23406f, -6.78347f, -3.72766f, -0.82774f, 0.506435f, 3.4979f,
      1.01518f, -3.37814f, -7.57117f, -3.55205f, -2.11362f, -1.27558f, 2.65255f,
      5.50964f, 5.92658f, 6.081f, 5.12668f, -0.729739f, -6.49804f, -5.06749f;

  std::cout << "    Testing with sigma=0.5" << std::endl;
  {
    float scale = getDerivativeScalingFactor(0.5f);
    if (scale < 1e-8f) {
      std::cout << "        Test futile because createFstDevKernel1D produces "
                   "too small values"
                << std::endl;
      ok = false;
    }
    cv::Mat_<float> resultX, resultY;
    dip5::calculateDirectionalGradients(img, 0.5f, resultX, resultY);
    std::cout << "        Checking x component" << std::endl;
    ok &= checkMatricesMatch(resultX, expectedResult_0_5_X * scale,
                             "            ", 1e-3f, 3);
    std::cout << "        Checking y component" << std::endl;
    ok &= checkMatricesMatch(resultY, expectedResult_0_5_Y * scale,
                             "            ", 1e-3f, 3);
  }

  std::cout << "    Testing with sigma=0.75" << std::endl;
  {
    float scale = getDerivativeScalingFactor(0.75f);
    if (scale < 1e-8f) {
      std::cout << "        Test futile because createFstDevKernel1D produces "
                   "too small values"
                << std::endl;
      ok = false;
    }
    cv::Mat_<float> resultX, resultY;
    dip5::calculateDirectionalGradients(img, 0.75f, resultX, resultY);
    std::cout << "        Checking x component" << std::endl;
    ok &= checkMatricesMatch(resultX, expectedResult_0_75_X * scale,
                             "            ", 1e-3f, 3);
    std::cout << "        Checking y component" << std::endl;
    ok &= checkMatricesMatch(resultY, expectedResult_0_75_Y * scale,
                             "            ", 1e-3f, 3);
  }

  if (ok)
    std::cout << "Test ok" << std::endl;
  else
    std::cout << "-----> Test failed" << std::endl;

  return ok;
}

bool test_calculateStructureTensor() {
  std::cout << "==== test_calculateStructureTensor() ====" << std::endl;
  bool ok = true;

  std::cout << "    Testing different image sizes to check for crashes"
            << std::endl;
  {
    std::vector<std::array<unsigned, 2>> sizes = {
        {64, 64}, {64, 64}, {16, 64}, {64, 16}, {64, 64}, {64, 64}, {16, 16},
    };
    for (auto t : sizes) {
      std::cout << "        testing image size " << t[0] << 'x' << t[1]
                << " sigma=3.5" << std::endl;
      cv::Mat_<float> imgX = cv::Mat_<float>::zeros(t[0], t[1]);
      cv::Mat_<float> imgY = cv::Mat_<float>::zeros(t[0], t[1]);
      cv::Mat_<float> A00, A01, A11;
      dip5::calculateStructureTensor(imgX, imgY, 3.5f, A00, A01, A11);
      if (!matrixIsFinite(A00)) {
        std::cout << "             A00 matrix contains nan/inf values. Out of "
                     "bounds access?"
                  << std::endl;
        ok = false;
      }
      if (!matrixIsFinite(A01)) {
        std::cout << "             A01 matrix contains nan/inf values. Out of "
                     "bounds access?"
                  << std::endl;
        ok = false;
      }
      if (!matrixIsFinite(A11)) {
        std::cout << "             A11 matrix contains nan/inf values. Out of "
                     "bounds access?"
                  << std::endl;
        ok = false;
      }
    }
  }

  std::cout << "    Testing pattern" << std::endl;
  {
    cv::Mat_<float> gx(12, 10);
    gx << -1.60309e-09f, 0.158135f, -0.700928f, -0.428596f, 1.23874f,
        -0.278008f, -0.648399f, 0.305163f, 0.515015f, -1.14504f, 0.769846f,
        -0.0464312f, 1.30591f, -1.95968f, -1.89921f, -0.537238f, -0.74829f,
        1.89649f, 0.27405f, -1.38021f, 1.53655f, -0.786357f, -2.47486f,
        -1.54792f, -1.36602f, -0.0632474f, 1.35166f, 0.799109f, -0.262907f,
        -0.521005f, 1.83298f, 0.36654f, 1.29202f, -0.64154f, -0.861299f,
        1.0746f, 0.0481772f, -0.277725f, -0.154436f, -0.368766f, 1.04959f,
        0.474517f, -0.109831f, 1.028f, -0.747347f, -0.608659f, -0.2127f,
        1.16137f, -1.97154f, 0.697937f, -0.216486f, 0.0980085f, 0.262698f,
        -0.837436f, 0.648999f, -0.169301f, 1.66496f, -0.286667f, -0.801671f,
        0.709641f, 0.594035f, 0.686286f, -0.486322f, -0.580023f, 0.124638f,
        -0.958383f, -0.958124f, 1.1708f, 0.646014f, 0.366217f, -1.17102f,
        1.32936f, 1.27752f, 1.4333f, -0.504158f, -1.07215f, 1.10956f, 0.49447f,
        -0.898831f, -0.539317f, -0.11541f, -0.948654f, 0.522885f, 0.114684f,
        0.0345465f, -0.971531f, 0.862722f, 1.25682f, -0.761999f, 0.556617f,
        2.28242f, 2.58638f, 1.67061f, -0.0984489f, 1.18169f, -1.98191f,
        1.19408f, 0.125284f, 1.4281f, -1.43676f, 0.0503599f, 0.931104f,
        -0.693313f, -1.54853f, -1.38302f, -1.25584f, -1.11625f, 0.0733989f,
        0.354004f, -0.372505f, -0.156785f, 0.335226f, 0.478732f, 0.241359f,
        0.373641f, 0.114401f, 1.01099f, 0.0799226f, -2.23518f, -1.37935f;
    cv::Mat_<float> gy(12, 10);
    gy << -1.265f, -0.273474f, 0.64982f, 0.16085f, -0.853056f, 0.187073f,
        0.274962f, -1.43715f, 0.264925f, -0.686395f, 1.26789f, -0.0910633f,
        0.54422f, 0.0286043f, 0.248212f, 0.563776f, -1.72982f, 0.798793f,
        -0.0745092f, -1.62759f, -2.23126f, 0.385718f, 0.446554f, 1.35105f,
        0.412215f, -0.299363f, -2.36303f, -0.0810874f, -1.24581f, 1.76643f,
        0.358708f, -0.227878f, 0.284414f, -0.653472f, 1.2758f, -0.438249f,
        -1.83031f, -0.34872f, 1.12324f, 0.775788f, 0.0804748f, -0.299192f,
        -1.1474f, -1.31934f, 1.3605f, 0.169117f, 0.599371f, 0.502369f,
        -0.280078f, 0.385191f, 0.102681f, -0.025677f, 0.397994f, -0.449309f,
        -0.417575f, -1.36719f, 1.85055f, -2.44194f, -0.675538f, -0.278766f,
        1.90841f, 0.302918f, 0.221555f, -0.51797f, 0.945611f, -1.04736f,
        0.662374f, 0.517331f, -2.2819f, 2.14739f, 0.728252f, 2.44464f, 1.32665f,
        0.342495f, -0.466332f, 0.00253393f, -0.698783f, -0.549797f, 0.0384336f,
        0.15145f, 0.469913f, -0.137089f, 0.0883208f, 0.271977f, 0.810051f,
        -0.242656f, -0.908382f, -1.13916f, -0.166682f, 0.330695f, -0.8805f,
        -0.103474f, -0.0648911f, -1.7404f, 1.14352f, -0.351813f, 1.19335f,
        -0.228866f, -0.130107f, 0.532899f, 1.26371f, 0.300908f, 0.970556f,
        -0.591456f, 0.263322f, -0.333982f, 0.0600405f, 1.01645f, -0.318989f,
        0.560532f, -0.765914f, 0.951998f, 1.54925f, -3.06907f, -0.689543f,
        0.933376f, 1.87428f, -1.49135f, 1.16697f, 0.0318109f;
    cv::Mat_<float> expectedResult_0_5_A00(12, 10);
    expectedResult_0_5_A00 << 0.0588038f, 0.0905868f, 0.55186f, 0.704107f,
        1.45301f, 0.311843f, 0.402851f, 0.439408f, 0.388845f, 1.25409f,
        0.648898f, 0.349718f, 1.96944f, 3.15366f, 2.8953f, 0.598913f, 0.870059f,
        2.37144f, 0.561939f, 1.5002f, 2.08967f, 1.18882f, 4.37877f, 2.5978f,
        1.786f, 0.488717f, 1.29057f, 0.869868f, 0.192208f, 0.392012f, 2.71285f,
        0.684349f, 1.64279f, 0.843545f, 0.837383f, 0.857704f, 0.288415f,
        0.282659f, 0.395382f, 0.214685f, 1.11933f, 0.303236f, 0.274886f,
        0.82853f, 0.589087f, 0.423914f, 0.419908f, 1.21735f, 2.6262f, 0.736753f,
        0.180073f, 0.0933326f, 0.146865f, 0.601545f, 0.400597f, 0.410891f,
        1.85238f, 0.624826f, 0.84582f, 0.515922f, 0.44272f, 0.52542f, 0.408155f,
        0.487425f, 0.216042f, 0.798943f, 1.11306f, 1.05016f, 0.518917f,
        0.221343f, 1.16276f, 1.47109f, 1.39338f, 1.46573f, 0.452461f, 1.01158f,
        1.07326f, 0.599816f, 0.667396f, 0.32581f, 0.80697f, 1.41506f, 0.735946f,
        0.273066f, 0.300317f, 1.12152f, 0.955743f, 1.17362f, 0.786321f,
        0.52295f, 4.24535f, 4.97047f, 2.40068f, 0.589344f, 1.41127f, 2.92492f,
        1.42704f, 0.463619f, 1.51972f, 1.67318f, 0.649695f, 1.2412f, 0.902445f,
        1.74314f, 1.69205f, 1.61708f, 1.15451f, 0.22771f, 0.724658f, 0.565386f,
        0.0403943f, 0.181318f, 0.254719f, 0.304201f, 0.310373f, 0.28778f,
        0.84295f, 0.593202f, 3.70684f, 2.00897f;
    cv::Mat_<float> expectedResult_0_5_A01(12, 10);
    expectedResult_0_5_A01 << 0.0888195f, -0.0542649f, -0.271969f, -0.194365f,
        -0.798142f, -0.170148f, -0.0498028f, -0.170936f, 0.169954f, 0.853978f,
        0.356509f, 0.0583607f, 0.276578f, -0.23181f, -0.482703f, -0.178007f,
        0.61453f, 0.969855f, 0.334281f, 1.57037f, -2.28163f, -0.543745f,
        -0.791601f, -1.41022f, -0.658732f, -0.372183f, -1.87143f, -0.133819f,
        0.144553f, -0.435333f, 0.132059f, -0.0521827f, 0.129499f, -0.119659f,
        -0.857385f, -0.453813f, -0.359446f, 0.0538246f, -0.0510693f, -0.267723f,
        0.106972f, -0.0649382f, 7.98162e-05f, -0.858174f, -0.860552f,
        -0.161324f, 0.218505f, 0.501868f, 0.447834f, 0.193448f, 0.100827f,
        0.0248921f, 0.0863838f, 0.120598f, -0.194011f, 0.435564f, 1.94617f,
        0.817775f, 0.325689f, -0.00374707f, 0.768145f, 0.497418f, 0.17337f,
        0.27961f, 0.191736f, 0.623289f, -0.0574372f, 0.266172f, -0.752133f,
        0.40857f, -0.220704f, 2.1232f, 1.36566f, 0.494553f, 0.216578f,
        0.0424962f, -0.617412f, -0.336867f, -0.162306f, 0.0167428f, -0.265806f,
        0.315361f, 0.216431f, 0.117035f, 0.188068f, 0.166248f, -0.526697f,
        -0.962097f, -0.0574045f, 0.056944f, -1.43002f, -0.315906f, -0.112347f,
        0.278757f, 0.899713f, 0.706002f, 0.859313f, -0.0371372f, -0.196152f,
        -0.556147f, -0.111001f, 0.112525f, -0.2693f, 0.452186f, -0.0192975f,
        0.341087f, 0.28561f, 0.0246931f, -0.326255f, -0.265021f, 0.135471f,
        0.322986f, 0.438564f, -0.409802f, -0.256873f, 0.261153f, 1.33122f,
        -0.1475f, -1.86063f, -0.304403f;
    cv::Mat_<float> expectedResult_0_5_A11(12, 10);
    expectedResult_0_5_A11 << 1.4377f, 0.267346f, 0.331431f, 0.131755f,
        0.526269f, 0.162338f, 0.514699f, 1.55368f, 0.328491f, 0.634959f,
        1.75966f, 0.265124f, 0.259843f, 0.202897f, 0.162519f, 0.537659f,
        2.43269f, 0.902739f, 0.479183f, 2.22337f, 3.67911f, 0.555178f,
        0.326114f, 1.22077f, 0.417981f, 0.671636f, 4.01245f, 0.7522f, 1.37506f,
        2.64791f, 0.571922f, 0.143446f, 0.260465f, 0.746707f, 1.27116f,
        0.636432f, 2.60355f, 0.569485f, 1.01874f, 0.858503f, 0.0259017f,
        0.175036f, 0.996573f, 1.41944f, 1.47624f, 0.473037f, 0.906296f,
        0.799345f, 0.30291f, 0.195063f, 0.356729f, 0.0866422f, 0.25439f,
        0.367946f, 0.547245f, 1.59389f, 2.86304f, 4.13109f, 1.29189f, 0.605797f,
        2.68792f, 0.895101f, 0.292802f, 0.298191f, 0.72591f, 0.996631f,
        0.806361f, 1.21372f, 3.74451f, 3.69373f, 1.24271f, 3.9471f, 1.61072f,
        0.285322f, 0.291464f, 0.187967f, 0.46457f, 0.433191f, 0.538262f,
        0.524868f, 0.34901f, 0.567453f, 0.264088f, 0.402504f, 0.582468f,
        0.210002f, 0.790488f, 0.926845f, 0.144193f, 0.108642f, 0.720275f,
        0.112527f, 0.343053f, 2.04049f, 1.1417f, 0.337545f, 0.994602f,
        0.359468f, 0.080781f, 0.242882f, 1.27053f, 0.388479f, 0.973468f,
        1.39233f, 0.38357f, 0.234827f, 0.54911f, 0.911186f, 0.32058f, 0.272222f,
        0.707565f, 0.957903f, 2.75427f, 6.93769f, 1.32464f, 1.00232f, 2.77802f,
        2.11563f, 1.19315f, 0.161457f;
    cv::Mat_<float> expectedResult_0_75_A00(12, 10);
    expectedResult_0_75_A00 << 0.145961f, 0.253934f, 0.709976f, 1.16381f,
        1.32969f, 0.633052f, 0.50158f, 0.636883f, 0.647867f, 1.15325f,
        0.744195f, 0.845402f, 1.92885f, 2.50991f, 2.09787f, 0.93674f, 0.96214f,
        1.32859f, 0.85212f, 1.1158f, 1.77774f, 1.60298f, 2.75937f, 2.50213f,
        1.68658f, 0.897646f, 0.944311f, 0.90211f, 0.480982f, 0.517894f,
        2.04755f, 1.24378f, 1.53941f, 1.27935f, 0.947771f, 0.713739f, 0.543727f,
        0.593161f, 0.660674f, 0.413143f, 1.09558f, 0.529066f, 0.508949f,
        0.693192f, 0.614461f, 0.548954f, 0.674644f, 1.06308f, 1.45836f,
        0.808301f, 0.36083f, 0.238003f, 0.284275f, 0.499259f, 0.451357f,
        0.650104f, 1.14564f, 1.0101f, 0.952374f, 0.607666f, 0.545685f, 0.59174f,
        0.595763f, 0.592146f, 0.458328f, 0.769824f, 1.09657f, 0.899256f,
        0.589161f, 0.34277f, 0.990645f, 1.16404f, 1.1124f, 0.925188f, 0.614905f,
        0.877211f, 0.995045f, 0.821768f, 0.621071f, 0.385372f, 1.64328f,
        1.84311f, 1.24931f, 0.658277f, 0.711012f, 1.20648f, 1.11974f, 0.950748f,
        0.876519f, 0.743728f, 3.03728f, 3.1448f, 1.94623f, 1.02387f, 1.37073f,
        1.95312f, 1.35172f, 0.809236f, 1.09144f, 1.23806f, 1.32237f, 1.53544f,
        1.24209f, 1.24209f, 1.41209f, 1.49777f, 1.08061f, 0.695664f, 1.15323f,
        1.11735f, 0.162978f, 0.303219f, 0.388847f, 0.505229f, 0.527384f,
        0.584635f, 0.732655f, 1.11838f, 2.4407f, 2.01387f;
    cv::Mat_<float> expectedResult_0_75_A01(12, 10);
    expectedResult_0_75_A01 << 0.112398f, -0.0292913f, -0.152662f, -0.301208f,
        -0.536195f, -0.237921f, 0.0153954f, 0.0562621f, 0.30871f, 0.849838f,
        -0.184975f, -0.0915838f, -0.119442f, -0.400112f, -0.487019f, -0.242031f,
        0.0760061f, 0.390824f, 0.472772f, 0.929172f, -1.16789f, -0.533666f,
        -0.493099f, -0.792295f, -0.652415f, -0.559777f, -0.739749f, -0.116642f,
        0.113417f, 0.00165269f, -0.312372f, -0.170728f, -0.169365f, -0.493607f,
        -0.686037f, -0.509298f, -0.404478f, -0.033428f, 0.0285372f, -0.175273f,
        0.095514f, 0.00836803f, -0.0765183f, -0.460895f, -0.586372f, -0.119722f,
        0.361652f, 0.45518f, 0.314012f, 0.1125f, 0.207564f, 0.11109f,
        0.0565398f, -0.0608462f, -0.100004f, 0.417736f, 0.978812f, 0.67929f,
        0.232393f, 0.119717f, 0.500515f, 0.612329f, 0.438808f, 0.279513f,
        0.228952f, 0.365177f, 0.288249f, 0.11728f, -0.177166f, 0.140048f,
        0.216659f, 1.09863f, 0.93988f, 0.445924f, 0.232748f, 0.0462291f,
        -0.357059f, -0.371468f, -0.206517f, 0.0460247f, -0.322909f, 0.320327f,
        0.386009f, 0.26842f, 0.296482f, 0.165299f, -0.259931f, -0.494993f,
        -0.204028f, -0.0736948f, -0.828173f, -0.281486f, -0.025743f, 0.271209f,
        0.527117f, 0.544156f, 0.364496f, -0.0685733f, -0.22999f, -0.35227f,
        -0.256524f, -0.0396439f, -0.00197907f, 0.159762f, 0.195363f, 0.384149f,
        0.451177f, -0.0071825f, -0.436995f, -0.374483f, 0.130103f, 0.264348f,
        0.206625f, -0.150944f, -0.147386f, 0.354253f, 0.765193f, -0.162773f,
        -1.09346f, -0.51392f;
    cv::Mat_<float> expectedResult_0_75_A11(12, 10);
    expectedResult_0_75_A11 << 1.28579f, 0.505738f, 0.26592f, 0.238876f,
        0.35505f, 0.378765f, 0.832219f, 1.12432f, 0.661694f, 0.800084f,
        1.79448f, 0.644503f, 0.301858f, 0.347097f, 0.323261f, 0.813614f,
        1.76783f, 1.18937f, 0.943049f, 1.78937f, 2.36298f, 0.82841f, 0.427961f,
        0.740987f, 0.609061f, 1.16903f, 2.42696f, 1.34433f, 1.25631f, 2.06875f,
        0.929924f, 0.418227f, 0.479452f, 0.91169f, 1.00841f, 1.08716f, 1.8116f,
        1.05885f, 0.899465f, 1.0546f, 0.15158f, 0.254164f, 0.679718f, 1.06201f,
        1.12631f, 0.987843f, 1.39544f, 1.29435f, 0.705865f, 0.40053f, 0.658409f,
        0.358761f, 0.392256f, 0.563998f, 0.814811f, 1.32763f, 2.11848f,
        2.54756f, 1.76173f, 1.19684f, 1.88196f, 1.30999f, 0.637912f, 0.396619f,
        0.612922f, 0.929275f, 1.19555f, 1.74097f, 2.46146f, 2.55119f, 1.58805f,
        2.18247f, 1.27254f, 0.464739f, 0.380458f, 0.400396f, 0.541388f,
        0.722385f, 0.99866f, 1.06591f, 0.665243f, 0.916429f, 0.68402f,
        0.654617f, 0.568404f, 0.405619f, 0.661049f, 0.634219f, 0.285259f,
        0.1871f, 0.667149f, 0.352816f, 0.605029f, 1.23686f, 0.909644f,
        0.506741f, 0.697545f, 0.543471f, 0.229241f, 0.208469f, 0.962229f,
        0.690339f, 1.31587f, 1.96304f, 1.00159f, 0.566314f, 0.92783f, 0.927454f,
        0.512973f, 0.276292f, 0.808207f, 1.1285f, 2.86787f, 4.46062f, 2.04174f,
        1.1909f, 2.04018f, 1.86565f, 1.04791f, 0.319028f;

    std::cout << "        Testing with sigma=0.5" << std::endl;
    {
      cv::Mat_<float> A00, A01, A11;
      dip5::calculateStructureTensor(gx, gy, 0.5f, A00, A01, A11);
      std::cout << "            Checking A00 component" << std::endl;
      ok &= checkMatricesMatch(A00, expectedResult_0_5_A00, "                ",
                               1e-3f, 3);
      std::cout << "            Checking A01 component" << std::endl;
      ok &= checkMatricesMatch(A01, expectedResult_0_5_A01, "                ",
                               1e-3f, 3);
      std::cout << "            Checking A11 component" << std::endl;
      ok &= checkMatricesMatch(A11, expectedResult_0_5_A11, "                ",
                               1e-3f, 3);
    }

    std::cout << "        Testing with sigma=0.75" << std::endl;
    {
      float scale = getDerivativeScalingFactor(0.75f);
      cv::Mat_<float> A00, A01, A11;
      dip5::calculateStructureTensor(gx, gy, 0.75f, A00, A01, A11);
      std::cout << "            Checking A00 component" << std::endl;
      ok &= checkMatricesMatch(A00, expectedResult_0_75_A00, "                ",
                               1e-3f, 3);
      std::cout << "            Checking A01 component" << std::endl;
      ok &= checkMatricesMatch(A01, expectedResult_0_75_A01, "                ",
                               1e-3f, 3);
      std::cout << "            Checking A11 component" << std::endl;
      ok &= checkMatricesMatch(A11, expectedResult_0_75_A11, "                ",
                               1e-3f, 3);
    }
  }

  if (ok)
    std::cout << "Test ok" << std::endl;
  else
    std::cout << "-----> Test failed" << std::endl;

  return ok;
}

bool test_calculateFoerstnerWeightIsotropy() {
  std::cout << "==== test_calculateFoerstnerWeightIsotropy() ====" << std::endl;
  bool ok = true;

  std::cout << "    Testing different image sizes to check for crashes"
            << std::endl;
  {
    std::vector<std::array<unsigned, 2>> sizes = {
        {64, 64}, {64, 64}, {16, 64}, {64, 16}, {64, 64}, {64, 64}, {16, 16},
    };
    for (auto t : sizes) {
      std::cout << "        testing image size " << t[0] << 'x' << t[1]
                << std::endl;
      cv::Mat_<float> A00, A01, A11;
      A00 = A01 = A11 = cv::Mat_<float>::zeros(t[0], t[1]);
      cv::Mat_<float> weight, isotropy;
      dip5::calculateFoerstnerWeightIsotropy(A00, A01, A11, weight, isotropy);
      if (!matrixIsFinite(weight)) {
        std::cout << "             weight matrix contains nan/inf values. Out "
                     "of bounds access? Div by zero?"
                  << std::endl;
        ok = false;
      }
      if (!matrixIsFinite(isotropy)) {
        std::cout << "             isotropy matrix contains nan/inf values. "
                     "Out of bounds access? Div by zero?"
                  << std::endl;
        ok = false;
      }
    }
  }

  std::cout << "    Testing pattern" << std::endl;
  {
    cv::Mat_<float> A00(12, 10);
    A00 << 0.145961f, 0.253934f, 0.709976f, 1.16381f, 1.32969f, 0.633052f,
        0.50158f, 0.636883f, 0.647867f, 1.15325f, 0.744195f, 0.845402f,
        1.92885f, 2.50991f, 2.09787f, 0.93674f, 0.96214f, 1.32859f, 0.85212f,
        1.1158f, 1.77774f, 1.60298f, 2.75937f, 2.50213f, 1.68658f, 0.897646f,
        0.944311f, 0.90211f, 0.480982f, 0.517894f, 2.04755f, 1.24378f, 1.53941f,
        1.27935f, 0.947771f, 0.713739f, 0.543727f, 0.593161f, 0.660674f,
        0.413143f, 1.09558f, 0.529066f, 0.508949f, 0.693192f, 0.614461f,
        0.548954f, 0.674644f, 1.06308f, 1.45836f, 0.808301f, 0.36083f,
        0.238003f, 0.284275f, 0.499259f, 0.451357f, 0.650104f, 1.14564f,
        1.0101f, 0.952374f, 0.607666f, 0.545685f, 0.59174f, 0.595763f,
        0.592146f, 0.458328f, 0.769824f, 1.09657f, 0.899256f, 0.589161f,
        0.34277f, 0.990645f, 1.16404f, 1.1124f, 0.925188f, 0.614905f, 0.877211f,
        0.995045f, 0.821768f, 0.621071f, 0.385372f, 1.64328f, 1.84311f,
        1.24931f, 0.658277f, 0.711012f, 1.20648f, 1.11974f, 0.950748f,
        0.876519f, 0.743728f, 3.03728f, 3.1448f, 1.94623f, 1.02387f, 1.37073f,
        1.95312f, 1.35172f, 0.809236f, 1.09144f, 1.23806f, 1.32237f, 1.53544f,
        1.24209f, 1.24209f, 1.41209f, 1.49777f, 1.08061f, 0.695664f, 1.15323f,
        1.11735f, 0.162978f, 0.303219f, 0.388847f, 0.505229f, 0.527384f,
        0.584635f, 0.732655f, 1.11838f, 2.4407f, 2.01387f;
    cv::Mat_<float> A01(12, 10);
    A01 << 0.112398f, -0.0292913f, -0.152662f, -0.301208f, -0.536195f,
        -0.237921f, 0.0153954f, 0.0562621f, 0.30871f, 0.849838f, -0.184975f,
        -0.0915838f, -0.119442f, -0.400112f, -0.487019f, -0.242031f, 0.0760061f,
        0.390824f, 0.472772f, 0.929172f, -1.16789f, -0.533666f, -0.493099f,
        -0.792295f, -0.652415f, -0.559777f, -0.739749f, -0.116642f, 0.113417f,
        0.00165269f, -0.312372f, -0.170728f, -0.169365f, -0.493607f, -0.686037f,
        -0.509298f, -0.404478f, -0.033428f, 0.0285372f, -0.175273f, 0.095514f,
        0.00836803f, -0.0765183f, -0.460895f, -0.586372f, -0.119722f, 0.361652f,
        0.45518f, 0.314012f, 0.1125f, 0.207564f, 0.11109f, 0.0565398f,
        -0.0608462f, -0.100004f, 0.417736f, 0.978812f, 0.67929f, 0.232393f,
        0.119717f, 0.500515f, 0.612329f, 0.438808f, 0.279513f, 0.228952f,
        0.365177f, 0.288249f, 0.11728f, -0.177166f, 0.140048f, 0.216659f,
        1.09863f, 0.93988f, 0.445924f, 0.232748f, 0.0462291f, -0.357059f,
        -0.371468f, -0.206517f, 0.0460247f, -0.322909f, 0.320327f, 0.386009f,
        0.26842f, 0.296482f, 0.165299f, -0.259931f, -0.494993f, -0.204028f,
        -0.0736948f, -0.828173f, -0.281486f, -0.025743f, 0.271209f, 0.527117f,
        0.544156f, 0.364496f, -0.0685733f, -0.22999f, -0.35227f, -0.256524f,
        -0.0396439f, -0.00197907f, 0.159762f, 0.195363f, 0.384149f, 0.451177f,
        -0.0071825f, -0.436995f, -0.374483f, 0.130103f, 0.264348f, 0.206625f,
        -0.150944f, -0.147386f, 0.354253f, 0.765193f, -0.162773f, -1.09346f,
        -0.51392f;
    cv::Mat_<float> A11(12, 10);
    A11 << 1.28579f, 0.505738f, 0.26592f, 0.238876f, 0.35505f, 0.378765f,
        0.832219f, 1.12432f, 0.661694f, 0.800084f, 1.79448f, 0.644503f,
        0.301858f, 0.347097f, 0.323261f, 0.813614f, 1.76783f, 1.18937f,
        0.943049f, 1.78937f, 2.36298f, 0.82841f, 0.427961f, 0.740987f,
        0.609061f, 1.16903f, 2.42696f, 1.34433f, 1.25631f, 2.06875f, 0.929924f,
        0.418227f, 0.479452f, 0.91169f, 1.00841f, 1.08716f, 1.8116f, 1.05885f,
        0.899465f, 1.0546f, 0.15158f, 0.254164f, 0.679718f, 1.06201f, 1.12631f,
        0.987843f, 1.39544f, 1.29435f, 0.705865f, 0.40053f, 0.658409f,
        0.358761f, 0.392256f, 0.563998f, 0.814811f, 1.32763f, 2.11848f,
        2.54756f, 1.76173f, 1.19684f, 1.88196f, 1.30999f, 0.637912f, 0.396619f,
        0.612922f, 0.929275f, 1.19555f, 1.74097f, 2.46146f, 2.55119f, 1.58805f,
        2.18247f, 1.27254f, 0.464739f, 0.380458f, 0.400396f, 0.541388f,
        0.722385f, 0.99866f, 1.06591f, 0.665243f, 0.916429f, 0.68402f,
        0.654617f, 0.568404f, 0.405619f, 0.661049f, 0.634219f, 0.285259f,
        0.1871f, 0.667149f, 0.352816f, 0.605029f, 1.23686f, 0.909644f,
        0.506741f, 0.697545f, 0.543471f, 0.229241f, 0.208469f, 0.962229f,
        0.690339f, 1.31587f, 1.96304f, 1.00159f, 0.566314f, 0.92783f, 0.927454f,
        0.512973f, 0.276292f, 0.808207f, 1.1285f, 2.86787f, 4.46062f, 2.04174f,
        1.1909f, 2.04018f, 1.86565f, 1.04791f, 0.319028f;
    cv::Mat_<float> expectedWeight(12, 10);
    expectedWeight << 0.122257f, 0.167923f, 0.169579f, 0.133516f, 0.109573f,
        0.181032f, 0.312781f, 0.404777f, 0.25458f, 0.102633f, 0.512562f,
        0.360074f, 0.254615f, 0.248895f, 0.182135f, 0.401956f, 0.620932f,
        0.566904f, 0.323133f, 0.39007f, 0.685097f, 0.429024f, 0.294214f,
        0.378128f, 0.262055f, 0.356138f, 0.517482f, 0.533791f, 0.340414f,
        0.414201f, 0.606719f, 0.295446f, 0.351381f, 0.421134f, 0.24798f,
        0.286837f, 0.348747f, 0.379508f, 0.380375f, 0.27592f, 0.125842f,
        0.171597f, 0.286108f, 0.2984f, 0.20005f, 0.343537f, 0.391595f,
        0.495796f, 0.430085f, 0.25735f, 0.19082f, 0.122402f, 0.160099f,
        0.261347f, 0.282561f, 0.348174f, 0.450029f, 0.59361f, 0.59829f,
        0.395093f, 0.319833f, 0.210454f, 0.151979f, 0.15851f, 0.213302f,
        0.342549f, 0.535713f, 0.587761f, 0.465089f, 0.295394f, 0.591871f,
        0.398477f, 0.223148f, 0.166284f, 0.180612f, 0.273241f, 0.267642f,
        0.295077f, 0.356596f, 0.281581f, 0.428373f, 0.574904f, 0.36494f,
        0.273343f, 0.247176f, 0.286613f, 0.37772f, 0.225849f, 0.179386f,
        0.143657f, 0.36185f, 0.294572f, 0.461287f, 0.527628f, 0.424941f,
        0.281975f, 0.395278f, 0.321647f, 0.149399f, 0.0926382f, 0.528152f,
        0.47552f, 0.638958f, 0.752779f, 0.570153f, 0.339442f, 0.397851f,
        0.397473f, 0.240433f, 0.12089f, 0.118199f, 0.190193f, 0.329309f,
        0.449239f, 0.410669f, 0.32145f, 0.327905f, 0.690345f, 0.390409f,
        0.162187f;
    cv::Mat_<float> expectedIsotropy(12, 10);
    expectedIsotropy << 0.341561f, 0.884185f, 0.695069f, 0.380742f, 0.260153f,
        0.715671f, 0.938016f, 0.919321f, 0.777603f, 0.210169f, 0.807604f,
        0.966704f, 0.456563f, 0.348469f, 0.300909f, 0.918571f, 0.909799f,
        0.900577f, 0.720005f, 0.53707f, 0.661815f, 0.705809f, 0.369229f,
        0.466376f, 0.456613f, 0.689298f, 0.613992f, 0.950464f, 0.783782f,
        0.640523f, 0.815078f, 0.71106f, 0.696195f, 0.76883f, 0.507071f,
        0.637096f, 0.592269f, 0.918898f, 0.975235f, 0.751959f, 0.403611f,
        0.876353f, 0.962785f, 0.680036f, 0.459681f, 0.894165f, 0.756673f,
        0.84125f, 0.7949f, 0.851566f, 0.748871f, 0.820438f, 0.946587f,
        0.983193f, 0.892649f, 0.704187f, 0.551485f, 0.667415f, 0.881748f,
        0.87579f, 0.526986f, 0.442658f, 0.492768f, 0.641243f, 0.796462f,
        0.806424f, 0.934877f, 0.890472f, 0.609828f, 0.40829f, 0.918092f,
        0.476289f, 0.374262f, 0.478541f, 0.725812f, 0.855478f, 0.696788f,
        0.764373f, 0.88063f, 0.776091f, 0.742248f, 0.833334f, 0.755051f,
        0.832795f, 0.772777f, 0.711152f, 0.848432f, 0.569979f, 0.617628f,
        0.617332f, 0.390722f, 0.336884f, 0.72323f, 0.933556f, 0.745388f,
        0.458522f, 0.77155f, 0.951121f, 0.452488f, 0.256166f, 0.92472f,
        0.854568f, 0.999166f, 0.939466f, 0.944871f, 0.657808f, 0.79236f,
        0.979528f, 0.577201f, 0.346976f, 0.486823f, 0.53137f, 0.404468f,
        0.361862f, 0.639391f, 0.724178f, 0.473026f, 0.925386f, 0.447639f,
        0.278087f;

    cv::Mat_<float> weight, isotropy;
    dip5::calculateFoerstnerWeightIsotropy(A00, A01, A11, weight, isotropy);

    std::cout << "         Checking weights" << std::endl;
    ok &= checkMatricesMatch(weight, expectedWeight, "                ", 1e-4f,
                             0);

    std::cout << "         Checking isotropy" << std::endl;
    ok &= checkMatricesMatch(isotropy, expectedIsotropy, "                ",
                             1e-4f, 0);
  }

  if (ok)
    std::cout << "Test ok" << std::endl;
  else
    std::cout << "-----> Test failed" << std::endl;

  return ok;
}

bool test_getFoerstnerInterestPoints() {
  std::cout << "==== test_getFoerstnerInterestPoints() ====" << std::endl;
  bool ok = true;

  std::cout << "    Testing different image sizes to check for crashes"
            << std::endl;
  {
    std::vector<std::array<unsigned, 2>> sizes = {
        {64, 64}, {64, 64}, {16, 64}, {64, 16}, {64, 64}, {64, 64}, {16, 16},
    };
    for (auto t : sizes) {
      std::cout << "        testing image size " << t[0] << 'x' << t[1]
                << std::endl;
      cv::Mat_<float> img(t[0], t[1]);
      cv::randn(img, 128.0f, 64.0f);

      dip5::getFoerstnerInterestPoints(img, 0.5f, 2.0f);
    }
  }
  std::cout << "    Testing with internal test image" << std::endl;
  {
    std::vector<cv::Vec2i> expectedKeypoints = {
        {16, 4},    {29, 6},    {35, 8},    {56, 8},    {75, 9},    {78, 10},
        {145, 10},  {85, 12},   {3, 13},    {1, 16},    {13, 22},   {5, 23},
        {120, 36},  {97, 38},   {129, 39},  {92, 43},   {110, 43},  {25, 44},
        {122, 46},  {131, 53},  {92, 56},   {126, 57},  {101, 70},  {112, 73},
        {46, 78},   {51, 80},   {76, 81},   {157, 81},  {121, 94},  {41, 96},
        {81, 96},   {157, 97},  {99, 98},   {130, 98},  {149, 98},  {119, 99},
        {135, 101}, {151, 101}, {101, 103}, {29, 104},  {43, 105},  {120, 105},
        {48, 106},  {129, 106}, {142, 106}, {119, 109}, {6, 110},   {104, 110},
        {157, 110}, {55, 112},  {118, 112}, {67, 113},  {81, 113},  {123, 113},
        {144, 113}, {13, 114},  {101, 117}, {117, 118}, {87, 119},  {57, 120},
        {43, 121},  {125, 121}, {155, 122}, {21, 124},  {29, 124},  {35, 124},
        {6, 125},   {45, 125},  {74, 126},  {98, 126},  {84, 128},  {153, 129},
        {116, 130}, {134, 131}, {139, 134}, {45, 135},  {118, 135}, {158, 135},
    };

    cv::Mat img = cv::imdecode(
        cv::_InputArray((const char *)data_inputImage, data_inputImage_size),
        0);
    img.convertTo(img, CV_32FC1);

    auto keypoints =
        dip5::getFoerstnerInterestPoints(img, 0.5f, 2.0f, 1.5f, 0.5f);

    auto countOutsideBorder = [](const std::vector<cv::Vec2i> &keypoints,
                                 int minX, int minY, int maxX,
                                 int maxY) -> unsigned {
      unsigned count = 0;
      for (auto kp : keypoints) {
        if ((kp[0] > minX) && (kp[0] < maxX) && (kp[1] > minY) &&
            (kp[1] < maxY))
          count++;
      }
      return count;
    };

    for (auto kp : keypoints) {
      if ((kp[0] < 0) || (kp[0] >= img.cols) || (kp[1] < 0) ||
          (kp[1] >= img.rows)) {
        std::cout << "        Detected a keypoint at " << kp[0] << ',' << kp[1]
                  << " which is outside of the image bounds. x and y swapped?"
                  << std::endl;
        ok = false;
        break;
      }
    }

    int expectedCount = countOutsideBorder(expectedKeypoints, 10, 10,
                                           img.cols - 10, img.rows - 10);
    int count =
        countOutsideBorder(keypoints, 10, 10, img.cols - 10, img.rows - 10);

    unsigned maxDifferent = 5;

    if (std::abs(expectedCount - count) > maxDifferent) {
      std::cout << "        Outside a 10px image border " << count
                << " interest points were detected but " << expectedCount
                << " were expected." << std::endl;
      ok = false;
    }

    auto closestSqrDistance = [](const std::vector<cv::Vec2i> &keypoints,
                                 const cv::Vec2i &query) -> unsigned {
      unsigned result = -1;
      for (auto kp : keypoints) {
        int dx = kp[0] - query[0];
        int dy = kp[1] - query[1];
        result = std::min<unsigned>(result, dx * dx + dy * dy);
      }
      return result;
    };

    if (!keypoints.empty()) {
      std::vector<std::pair<cv::Vec2i, float>> falseNegatives;
      for (auto kp : expectedKeypoints) {
        if ((kp[0] < 10) || (kp[0] > img.cols - 10) || (kp[1] < 10) ||
            (kp[1] > img.rows - 10))
          continue;

        unsigned sqrDistance = closestSqrDistance(keypoints, kp);
        if (sqrDistance > 2)
          falseNegatives.push_back({kp, std::sqrt((float)sqrDistance)});
      }
      if (falseNegatives.size() > maxDifferent) {
        std::cout << "        Too many expected keypoints were not detected:"
                  << std::endl;
        ok = false;
        for (auto v : falseNegatives)
          std::cout << "            Expected a keypoint at " << v.first[0]
                    << ',' << v.first[1] << " but closest detected keypoint is "
                    << v.second << " pixels away." << std::endl;
      }

      std::vector<std::pair<cv::Vec2i, float>> falsePositives;
      for (auto kp : keypoints) {
        if ((kp[0] < 10) || (kp[0] > img.cols - 10) || (kp[1] < 10) ||
            (kp[1] > img.rows - 10))
          continue;

        unsigned sqrDistance = closestSqrDistance(expectedKeypoints, kp);
        if (sqrDistance > 2)
          falsePositives.push_back({kp, std::sqrt((float)sqrDistance)});
      }
      if (falsePositives.size() > maxDifferent) {
        std::cout << "        Too many detected keypoints were not expected:"
                  << std::endl;
        ok = false;
        for (auto v : falsePositives)
          std::cout << "            Detected a keypoint at " << v.first[0]
                    << ',' << v.first[1] << " but closest expected keypoint is "
                    << v.second << " pixels away." << std::endl;
      }
    }
  }

  if (ok)
    std::cout << "Test ok" << std::endl;
  else
    std::cout << "-----> Test failed" << std::endl;

  return ok;
}

int main(int argc, char **argv) {

  bool ok = true;

  ok &= test_createGaussianKernel1D();
  ok &= test_separableFilter();
  ok &= test_createFstDevKernel1D();
  ok &= test_calculateDirectionalGradients();
  ok &= test_calculateStructureTensor();
  ok &= test_calculateFoerstnerWeightIsotropy();
  ok &= test_getFoerstnerInterestPoints();

  if (!ok) {
    std::cout << std::endl << "==== Something failed! ====" << std::endl;
    return -1;
  } else {
    std::cout << std::endl
              << "==== Everything seems(!) to be ok. ====" << std::endl;
    return 0;
  }
}

const std::uint64_t data_inputImage[] = {
    0x464a1000e0ffd8fful,
    0x5e01010101004649ul,
    0x4300dbff00005e01ul,
    0x201010101010200ul,
    0x202020202010101ul,
    0x405020202020304ul,
    0x606060506040304ul,
    0x608090706060605ul,
    0x80b080606070907ul,
    0x8060a0a0a0a0a09ul,
    0xa0a090c0a0b0c0bul,
    0x8800080b00c2ff0aul,
    0xc4ff00110101a000ul,
    0x101030200001d00ul,
    0x10101ul,
    0x706030504000000ul,
    0xdaff0900010208ul,
    0xab01000000010108ul,
    0xe3425dcf8e65997aul,
    0x7e573babd5eda629ul,
    0xf504b6594b5c9201ul,
    0xd0907769549de8c2ul,
    0xd26d37261143491aul,
    0xa332c9809912324ful,
    0xf14468574ddc8d69ul,
    0x240418eef497b0ul,
    0xef0db315fe16b24cul,
    0xe8284176f8a723e9ul,
    0x335f0b055b57ea3eul,
    0xfc3fa61a877804e9ul,
    0x9bddf5d3537ed457ul,
    0x323e39f2a25eba1eul,
    0x7ae8cf1659cb4d0cul,
    0xb52ffbfaede996c1ul,
    0x8008924bd863a45ful,
    0xf3eaa2cfc28442d5ul,
    0xf3ce5f5efa59f7b1ul,
    0x9dd1cc9588c393fbul,
    0x53650972fa4d6ccful,
    0x6e81160b430057e4ul,
    0x8f970ad1a1decc37ul,
    0x785740d7fc5666eul,
    0x7975bf972f0de914ul,
    0xb024067e5fbf72a1ul,
    0x1e3bc057d37849e8ul,
    0x36f6b1de7336fe8ul,
    0x5b4b59f95adc7a98ul,
    0x9dfddb6c33740e0aul,
    0x1bced56d562778cful,
    0xaf74a354554726eeul,
    0x99bc2a6ae9a17b32ul,
    0xfefbfc5199fee84dul,
    0x9fe856b2a9a4b288ul,
    0x952e6cdbbacc885dul,
    0xc23b6207ddaaea7bul,
    0x378b6f9bdf8a7664ul,
    0xe35426c198b293a4ul,
    0xba54c1079bc225c3ul,
    0x23373a640e8b6f82ul,
    0x102700c4ff8f0795ul,
    0x202020200030200ul,
    0x30202ul,
    0x706000502010403ul,
    0x1622211514121113ul,
    0x800daff33322423ul,
    0x4694020501000101ul,
    0xa2c63f87beacaa8aul,
    0x16295ccdc05d3eb4ul,
    0x9a9046f2df92ca8cul,
    0x69db531a9d2b8265ul,
    0xb85ae560dcded0cul,
    0x88829c0a65986dd6ul,
    0x557202ea56f2b165ul,
    0x263ccaaae8259315ul,
    0x5dec6de3c13ebb84ul,
    0xa4218dc090a0bb4eul,
    0x30d453d0f0323aa5ul,
    0xac617cbe21d2b0d4ul,
    0xf7127a191580ac42ul,
    0x4d83f89a6a653c76ul,
    0x53dfafca7643f277ul,
    0xa8ecd6b43c824f25ul,
    0xaa20667090c2ca44ul,
    0x8d33ae63e9c59481ul,
    0x2a1266e6529895a3ul,
    0x71f8ed4f96524ba2ul,
    0xb9fed2b02a44c66ful,
    0x61c8aca1dd12b0acul,
    0xcbabaa25d2a012c3ul,
    0xa4a7157b2241b550ul,
    0x42416cb8a60a0a6bul,
    0x17c845a70fd5abe5ul,
    0xff1a3f71bd3f902ful,
    0x130e6bc335588300ul,
    0xab6cb2880514f930ul,
    0x45f023a22c6d797ful,
    0xb0051c8fbdcf3a63ul,
    0x2874a22890ca96d8ul,
    0x20d7d7a9192da5d7ul,
    0x5c700d444a19e3bful,
    0xa72899367dfb1fb6ul,
    0x3b37af589f93ab9eul,
    0xfc6d4ac1c0407b1cul,
    0x76bee0ae9c823df0ul,
    0xf585793f8dd7543bul,
    0x3731e702dbab5545ul,
    0x9867aed7426ff507ul,
    0xe96c76c8bbf85e1ful,
    0xc0c79f23524a2d56ul,
    0x330fa8941a5a132dul,
    0xcdeb609dddfe1dcdul,
    0xd0ccd93fc8c5fd9bul,
    0xb29f0ea29d98977aul,
    0x98413bb70f6daeb1ul,
    0x8ca9896f9a1c461eul,
    0xdc5cf7418ca96926ul,
    0xd15649500ee89aa4ul,
    0xcd451f4da5f88968ul,
    0x576fb08b164d2deaul,
    0x684de6d44f54f95ul,
    0xd36e16bf7e94db94ul,
    0xdb599f36dc5ab80cul,
    0xd8cfdabafb87a6f8ul,
    0xf160dbc3086c5440ul,
    0xc92d6fbcf246a4b1ul,
    0x4c581f439d00ff07ul,
    0xd7f07bd9f3ca1e71ul,
    0x5af7ceb7bd9537f9ul,
    0x33cad11e4cacedb3ul,
    0xa348c8e09919e158ul,
    0x476a18cde92e2966ul,
    0xe7e947e02c6a11c5ul,
    0x1464b8d3c9cf5dul,
    0x9961594667f151c9ul,
    0x68453d15f9d4d281ul,
    0x49c7bfa9a0bcb176ul,
    0xb366fbeb56728dfcul,
    0xde626f00afc57043ul,
    0x6dfcf59a5fa1edbful,
    0x22672cf6ae53fbadul,
    0x88edcf0cea1600fful,
    0xfdaf2257f377f809ul,
    0xb5daac56a48dd606ul,
    0x2f21cf2909b5665aul,
    0xbe755e00ff42f50cul,
    0x5bfabc0c62b5a3bful,
    0x17c1a271e6156de2ul,
    0x77a6f1f47dd0aacdul,
    0xc5545e24cdebf5e0ul,
    0xf73f5d9f74fdbb32ul,
    0xc74f6a15496d66adul,
    0x6caea7fce25bbc68ul,
    0x276ed1c5681a7f53ul,
    0xc17cd787df18c6e3ul,
    0x35e96bc06c7916ddul,
    0x32d3bdad05483cd2ul,
    0x59ea0d3c2401c299ul,
    0x93ebd97a5dd088ebul,
    0x58938cf46b2a8d9dul,
    0x3d1654b0e3b7326ful,
    0xd151717d8c1a8a05ul,
    0x25552bf70bb76246ul,
    0x91fed8b8b9dca9ecul,
    0x99ab36773d0b3bddul,
    0xd665a84b4b07faf6ul,
    0x903ce42962fb7b6aul,
    0x1fb38534faaee67ul,
    0x59655cc05a693c63ul,
    0xde32a9a6b80ed69eul,
    0x6673b3b974d70972ul,
    0xc5ef35144073555cul,
    0x2b9a15b40db3682ful,
    0xce443421864203abul,
    0xd30fc0f1d6233ca7ul,
    0x78e277141d39e675ul,
    0xff80c53c4f88dful,
    0x1dc45d7316e34bfdul,
    0xeccb9d75493bbf42ul,
    0x18da86b6ca1e158bul,
    0x5d6a6bd2e8b8db80ul,
    0x5200b2ba473961adul,
    0x4ea3c066d6385bd6ul,
    0xbdd330bbf41ad1feul,
    0x9bbfea4339bad73ul,
    0xbdafb495f8c3a0bul,
    0xb36f1e7494e73687ul,
    0xbc4ba315fc28b650ul,
    0xeac8c5e29d6a12a8ul,
    0xf20cc08e766968ecul,
    0xf2fb292da12f27caul,
    0xbaa1ab405fd005d2ul,
    0xbe882ff2e576e134ul,
    0x5e6a49e909d082a0ul,
    0x6863496479bd964bul,
    0xbe68161a9aa63e61ul,
    0xeea933736454f14cul,
    0x8bf773f6318d177eul,
    0x2f57d1d7440bf4f9ul,
    0x69b72748fbd839c5ul,
    0xe831454f835f3cb6ul,
    0x5ede730b9c3eab75ul,
    0x6819edae67a4cbaeul,
    0x2a846dfd1a07eec0ul,
    0xd087c2c99a8fb70eul,
    0x320fc8c9dfdda0e9ul,
    0x97f56cec1d8eebd1ul,
    0xb02e6a89d2408884ul,
    0x2557589dd60b2aa8ul,
    0xd010ade7d63302f2ul,
    0x60d6206dfd5cab82ul,
    0x2d953ef294b0ca3eul,
    0xaf1d8755b70ced8dul,
    0x60eb45cd613b5335ul,
    0x2fe1c00b94fdc590ul,
    0x1962cdae42d0befdul,
    0x8061998a4d284686ul,
    0x3d6b99c9ba21d012ul,
    0xff93d9e2a6403013ul,
    0x2010200103d00c4ul,
    0x109030605050304ul,
    0x3020100000001ul,
    0x2213053121120411ul,
    0x8142147161514132ul,
    0xf0d1b1522306a191ul,
    0x4334241510e1c133ul,
    0xdaff8272f1c26253ul,
    0x23f060001010800ul,
    0xebf727b74c019712ul,
    0x6d4366946e25c452ul,
    0x5becc622e92b2caaul,
    0x2b7b5e16c352f8f0ul,
    0xf1bed6df6f5b5b31ul,
    0x60a2a8767e0dcb7ful,
    0x436caa6ddbc46c2ful,
    0x2233b5efb8f6d203ul,
    0x5a2213eafdc58f15ul,
    0x2d5cf814ee16e6c4ul,
    0xa33a216b00ff1beeul,
    0x8d75a4563bc95854ul,
    0x7f24ed141e354cb2ul,
    0x95a5fc5ce932ae78ul,
    0xe15126232ead5b5bul,
    0x97829dba7b2f9245ul,
    0x15737db76688b90aul,
    0x7bd01553d4dac87aul,
    0xb3e7f044109fa6b5ul,
    0x9443280422c4a106ul,
    0xe795d11a43ed1b1ful,
    0x93c63530b3bb736ul,
    0x761c8b5404362c55ul,
    0xb28bb4852e92fbful,
    0xcedb29c9745ba6a1ul,
    0x85bf5f7991d3c989ul,
    0x2d227e6a6b548d65ul,
    0x4fc4d0f9d3a7ef9dul,
    0xe0d2fa960f426a27ul,
    0x735e5841bf42549ful,
    0x58c2a9f52920b68eul,
    0xc04c12ee683d6da8ul,
    0xb7c0f332282c4935ul,
    0x60a9f4b2a837c185ul,
    0x38ec162256771b49ul,
    0xc14c7d2c0f2bbcb5ul,
    0x2c152ebe52c85f10ul,
    0xd115c3c0a7d2bb5bul,
    0xf6c3e3486ad51883ul,
    0x58fb00ffbe612d23ul,
    0xec3095ab727a3978ul,
    0x80779140acf4959bul,
    0x77fa96692f316ae4ul,
    0x3373d2c9701c49e9ul,
    0x16170050a334a001ul,
    0xbaec7a4cbcfb8a3bul,
    0x54d450bf112a0f8aul,
    0xcc16d0f9939a4fc1ul,
    0x5c8afdd17e0d2902ul,
    0x9f4acb5b58785159ul,
    0x50e32fd0c99b5812ul,
    0xba9eb71cb8fc5c16ul,
    0x3e1c49cdb01b84d3ul,
    0xe01a7da3d92b6ae3ul,
    0x8b2c7d38d4fae9e9ul,
    0xb366b32751334f9ful,
    0x535a5f774be94510ul,
    0xcf7ad7731f9bfb84ul,
    0x61a501b0f8a856dul,
    0x1d5b06752057d8d8ul,
    0xad1ff27157cc956bul,
    0xbf226935f5d78c73ul,
    0x72a527a7ac15669dul,
    0xba1f4f61ff511f1ul,
    0xd3e8f4e66647c63bul,
    0xacf0596d10bace07ul,
    0x9ae028fd569b0d96ul,
    0xdfb1d1f815d8aac0ul,
    0x2eacda77488bda5bul,
    0xb02f2a8ba3b1a92ful,
    0x396d2e09ab3a7a0ul,
    0xf07515dede5853ccul,
    0xe1d078dbacf2c9bdul,
    0x2383ca0fdbfe1ef8ul,
    0x8d7f6b7ded5ac75aul,
    0xce1a9f9a7018ad69ul,
    0xa5e2c7a7b74eece6ul,
    0x6642217fb6a3c611ul,
    0x18d1f0d55bb6550eul,
    0x17e6eccde86d80cful,
    0x708b2757b3cb25f7ul,
    0x185abf1dbed8da12ul,
    0x8aada3b3066b08bcul,
    0xae5abdf63deb0a9ful,
    0x957e5da3469dd5ddul,
    0xad2da2563e37fe72ul,
    0xdb6115e8f13295feul,
    0x926caef364f6d10cul,
    0xd57a3359e7c34256ul,
    0xdfe6b3d2b7defab3ul,
    0xca20a98cd637b07aul,
    0x77d66b53db45c3bful,
    0xe44ab77d07527580ul,
    0xfcb8d4b2e3109148ul,
    0x3d2c759e8e9de800ul,
    0x35b7adf4971f83e1ul,
    0x7beba0acf6769f9cul,
    0x5b645ddf69bbb3daul,
    0x6bfc5ba79c82e95dul,
    0xd55beb00ffc5a302ul,
    0x5cadbc8d59b5b79aul,
    0xa163f5de68d73ba6ul,
    0x9dc73ab21f2946acul,
    0x589650b3ef2d502cul,
    0x33a0f0ef01995dfbul,
    0x3a62bae8aa944e76ul,
    0x9c3c7c2915351d73ul,
    0x85b7a49749728986ul,
    0xbc5bd4b4daa8ed72ul,
    0x6f8db29ac4de7953ul,
    0x487d97578fa54ae1ul,
    0x9785951ec885b5b1ul,
    0x76355a6d84849ac1ul,
    0x9e5b3adf5e34f2b4ul,
    0x4c0826d5603536faul,
    0xcb43edfb960d656cul,
    0xab81b791f225e57aul,
    0x9d178e78d9ab7beeul,
    0x6029fc1ab150691ful,
    0x2c5d2e5b2215c4c1ul,
    0xf359eb933bb63e2bul,
    0x36b3dab091aed96dul,
    0xfc2bfd7e2649cbddul,
    0xbb51ebbbc6c5b531ul,
    0x3ba056233f4eb2a1ul,
    0x2f09957fb6ed4fd7ul,
    0x91f4f695aed5cbdul,
    0x6f01b3ddad31e7c2ul,
    0xd8a0d2e112577b9dul,
    0x541b5c5d950f84beul,
    0xa0a689be5ad7dc49ul,
    0xd47a3a19327cd57bul,
    0xba5e83f721037fadul,
    0xab52dbb6b20a7f2ful,
    0x62bdf34987d263eeul,
    0xf487fe9ead9aca70ul,
    0x998b62100397c9feul,
    0xc3cd49ada78735b3ul,
    0xb6235925d9441bc9ul,
    0x33f9ea2d6abf056ul,
    0x32ea7c9415fe4671ul,
    0x6d779b5cece4fdf0ul,
    0x9a6447eaa2c4a9fcul,
    0x70e2c185c2803f5eul,
    0x903f744877c4c870ul,
    0xa77650c3fa371fa8ul,
    0xcfb8e451036f8331ul,
    0xb130a97ced669835ul,
    0xcd824b61970d0b33ul,
    0xa7f4d257aa2e499eul,
    0x31d7b206ed76d6c0ul,
    0xd54509c42a6fcb57ul,
    0xf21415b85a6f71e1ul,
    0x6cc47f2b13c676c7ul,
    0xe66bf8661f3abfbful,
    0x296cc483446c20cbul,
    0x283d579a653d1c30ul,
    0x3237d63ec44b939aul,
    0x6bfc7d03fd12c64dul,
    0xc906860f77f8c311ul,
    0x95a2a97a611c239aul,
    0x3e62d44610247448ul,
    0x622fb582414acf0ul,
    0xadafd3cd67e50a3ful,
    0xdd85854b33207063ul,
    0x7d905111fa77dd74ul,
    0xcedfe55470af4ee1ul,
    0x531b3bb8817a24adul,
    0x7b75b77669da1cc5ul,
    0xefa72f1d7290b85cul,
    0x95a8ef663a2953faul,
    0x6eefe9239da7e43bul,
    0xc22757cc6e259aeaul,
    0x8b2b0669fb0ca9bul,
    0xa9b5374aab5170d9ul,
    0x8aec91246974f870ul,
    0xff748cad60862637ul,
    0x30a19047fd2f1500ul,
    0x1d3a6656d0df1590ul,
    0x94333b060dc2fbabul,
    0x6b58e32ff48665b7ul,
    0x3c7a6ba06e85e68bul,
    0x589fb5105cc45eb8ul,
    0xbd06ded6c5d968d4ul,
    0x6cc29aa72feeecaful,
    0xbedee31e1c780313ul,
    0x2153a3dd32371615ul,
    0x658d5f00ffbb85beul,
    0xf51f0349eb584a5cul,
    0xe190a2b6c57d1333ul,
    0xdb446932b3452a25ul,
    0x9d9e2a52d4f9fb7eul,
    0x8e598c67afefef37ul,
    0xbe89b7068db1caa7ul,
    0x6d4293b51162d406ul,
    0x3a2c8e34731c7152ul,
    0x1aa6f8685fb1e646ul,
    0x4d530d6b387946d2ul,
    0x7bac1e93284de54ful,
    0x28d138e1e78aba4cul,
    0xfe5f1c278a82d67dul,
    0x398169dac2b5fe72ul,
    0x437db735fc96be25ul,
    0xba12969064aef01bul,
    0xd048e9fdee377283ul,
    0x62e5b1dffa1ef944ul,
    0xead89de03adcf069ul,
    0x60e7e1c41ad4ef08ul,
    0xff3aefb1769b5ful,
    0xf2a0eaac2d765c3aul,
    0x3652f15b8480c364ul,
    0xfa4864ea7398823ful,
    0x2f9c981c93daf148ul,
    0xd3f96b76b9dc1629ul,
    0x1cd17ccd1a2cb060ul,
    0xa2a32bfcfad81b84ul,
    0x4c7854faae64f7edul,
    0x45dfcb461bea1e1eul,
    0x8ddf5fb88d1e8bf1ul,
    0x2668bf73c0c38749ul,
    0xefcc1c8c6399a8f4ul,
    0x4164f2d2b16028dcul,
    0x81a1487c8ea6f070ul,
    0x834651ddf262e4f6ul,
    0xcab9356275d5fc4eul,
    0x9986b98cde1f8ca2ul,
    0xf2629ce1ced5e652ul,
    0x7c0c922a7fd9d6eful,
    0xd2f66aa71a0fdfe5ul,
    0xfcd4bae2c9d2faf6ul,
    0x979c80885138111bul,
    0x1873c328bdf4afdcul,
    0x2bee58eba3ae6d46ul,
    0x3aee08836673c286ul,
    0x71e273102b86da74ul,
    0xbc14005ddbeca872ul,
    0x8f24dc6116c5193ful,
    0x74e052662f46e3c3ul,
    0x1adef8eabc8dd8b2ul,
    0xe80d1b9f1edf2b64ul,
    0x1efc979754282cf1ul,
    0xa0ae50e92dfa9875ul,
    0xc810631097e2e0ebul,
    0x5882ba9adcb0c39ful,
    0xac1db4feb5f103f5ul,
    0x2ac6691298cd3133ul,
    0xfbc9a317d99e0426ul,
    0x872306a3f4db77cbul,
    0x24687d1d7afb2937ul,
    0xf87611aa4221ca32ul,
    0x106bfcb32f71281dul,
    0x5bdb8b2417de6439ul,
    0x6ecb3225ae71b0d4ul,
    0x37bd75bcbd55a198ul,
    0xd66658319998e01ful,
    0x119ff764e47d6b7eul,
    0x79a4f1488583884dul,
    0x459ddf1f8fec36e4ul,
    0xd296a298b2e1a2c6ul,
    0x27831433d7f4944bul,
    0xc932a5fd3a9f2baul,
    0x884985cf5a3b489cul,
    0xa90a739cd4969f62ul,
    0x9f82f94ab0eab11cul,
    0xa9f05fdd689e551bul,
    0x3914ab123162c3a7ul,
    0x393618b9ca2f3b58ul,
    0x82de7a3a76dd00fful,
    0xeb6b0f966b1621b6ul,
    0xf2bf047b9194fef3ul,
    0xb11c73d48e6f6f19ul,
    0x3314cb7a839813d8ul,
    0x7fef742b4aaf9803ul,
    0x77491851181e2ea5ul,
    0xa53700ff9f6e7196ul,
    0x1066c1dced31f1c3ul,
    0x4374c4213d413f6ul,
    0xe9afbaa6dcaea99ful,
    0x406da0df85136c4bul,
    0x96d77ea7c3301636ul,
    0x85955ec7043746d4ul,
    0x23e1871143e727f5ul,
    0xa6f1480fad574c34ul,
    0x642abd5c5e587049ul,
    0xbdae6a0c1b55feeaul,
    0x98ac08506f6b349cul,
    0xcb8900ff488ee479ul,
    0x49c3884153c4bf41ul,
    0x42bea5526c2e0738ul,
    0x20ab03268e825196ul,
    0xdac654002f6eaeeeul,
    0xb753e1b7a85a6d68ul,
    0xe5d18dd948957fadul,
    0x5f899fc42a3250d4ul,
    0xcc6ea93cc4274cb5ul,
    0x5d15495680de5e92ul,
    0x83a3f2acf41fe77ful,
    0x465286a08085f47ful,
    0xecbd72d2757e83e1ul,
    0xd43b0ee1395af7caul,
    0x3f1e1320cb5f23ful,
    0xc4a3ff6723fdd98ul,
    0xe5db0ad9bd5d7e61ul,
    0x347600cdcb537bbdul,
    0xbb6db90a2bd7f8faul,
    0xb3639658cc14e965ul,
    0x64692a16a1f12f02ul,
    0x5f1f5f28c40c6d12ul,
    0x40d996919c30599dul,
    0x6c38874d693a9eb6ul,
    0x8548aec1a56c87b9ul,
    0x7bcd8d8717c34fd6ul,
    0x7232ca21e28a2756ul,
    0x92610c8bd2b765e4ul,
    0xa7ef96beb5dded34ul,
    0x6864bcf0843861c5ul,
    0xd9f0b2947eb748b9ul,
    0xa336036bf49c483ul,
    0xb0fb290bc51600fful,
    0x9b3957197b8d4fc3ul,
    0xc4ff3a9fda7c77ul,
    0x301020200011025ul,
    0x1010304ul,
    0x4131002111010000ul,
    0xc1b1a19181716151ul,
    0x800daffd1f1f0e1ul,
    0xa51213f01000101ul,
    0x2156616b5f50134cul,
    0x292e990227066974ul,
    0x9a9237e47d5487d8ul,
    0xd274f4720cd61725ul,
    0x711b6f90440eefc5ul,
    0xeef2ca609048c4f9ul,
    0xffba8c979f1ca7e0ul,
    0xb348550b2ec10600ul,
    0x909c874a9b7c6f71ul,
    0x10dc31facb1dc6c4ul,
    0x8e88f6f0f1b2b689ul,
    0x8a5ccf7df40ccc72ul,
    0xc615caa27094805ul,
    0x4cf23d1335ea7026ul,
    0xd136d7fd110548a3ul,
    0xd974b8404e703d80ul,
    0xa5b683a14cdefef5ul,
    0x740a135c811434ful,
    0x3efcb71191c5f868ul,
    0x7a8e5f8a88da7c73ul,
    0x8bf35342a56451e7ul,
    0x83f68e75f8ddb52ful,
    0x21d00b37d7dbed02ul,
    0x3344edcaed70f4a4ul,
    0x8b2d87217cd3519ul,
    0x95419264c8cd5fbdul,
    0x1224496478db83a8ul,
    0x55b375f49ac9f8d8ul,
    0x81310817212138e7ul,
    0x31395823f42c25caul,
    0x27606cc048ef6e81ul,
    0x6cc2c2ad3300fffcul,
    0xc794ec4c436d4c7dul,
    0xb707ac322d2130c6ul,
    0xbdc78c0896ca6ec6ul,
    0xfd248e3149673c8eul,
    0x7c54e22c1205d8beul,
    0x938f44d926b03563ul,
    0x1c2a62abbb01c322ul,
    0x45fe3b7fb24e0d00ul,
    0x18cf93b4208ee6fcul,
    0x52a428b35a0dcfaeul,
    0xfb890072b724de50ul,
    0x9c5fea36003ee17bul,
    0xce07c16734a05f9dul,
    0xd39cf2615214781dul,
    0x9e08f5cbf1a1f13ul,
    0x22b938826cefaf39ul,
    0xefe0e5448b3fce6ul,
    0xc9874823c002eb8ful,
    0xdecfd82d90be19e7ul,
    0x57269f0c691ca100ul,
    0xefa70658002429dful,
    0x5a4784ef6f273a22ul,
    0xff407ec6f5aa72ul,
    0x9164f1e34558c677ul,
    0x8481b5102019e9a4ul,
    0x5fa87228f95e662aul,
    0xf81049ae14d81e95ul,
    0x199c77f500c50bcaul,
    0xac425031dd1d4ddbul,
    0xa84d0fd100b1fecbul,
    0x52b06abd5506caf4ul,
    0x41d292f98f195bdbul,
    0xb7b7e86c02c654a7ul,
    0x348c6bb20e682b19ul,
    0x3551f0bd92f219a7ul,
    0x3e5522a885694b82ul,
    0xe28538d19b46cb70ul,
    0x774f6b83b2505cc7ul,
    0xcefa145ed7811215ul,
    0x670a2ce2300d0105ul,
    0xdad78ffc72e77620ul,
    0x6925005cbd8db468ul,
    0xafa634fe85643aacul,
    0x8e6987385a21bea7ul,
    0x93f3ef95683e3858ul,
    0x88c18a49c4ad52fdul,
    0x9cc09bd94d79f354ul,
    0x503bd83396bfdd31ul,
    0xb8d99882c8fbe523ul,
    0xce4672da65fcfe7dul,
    0x919408c5bb29a28bul,
    0xa1194eb5628c1de3ul,
    0x67aa53547cdf6da0ul,
    0x6641d3c9ec252405ul,
    0xefbd93743960d471ul,
    0x325faefbf70f6b29ul,
    0xc1fdc7e03c8677a1ul,
    0x20e7f7f5b07f53c4ul,
    0x90042ec43077b111ul,
    0xe7f790db01638d4eul,
    0x1272567f5c720125ul,
    0xa592c3f6985f2b72ul,
    0x4ea9c53bb626a28ul,
    0x9f7a7e270de34bb1ul,
    0xc6169c43db206184ul,
    0xad3499064c5d0c20ul,
    0x8176b98c08430918ul,
    0x124f6386953efb91ul,
    0xed649e75aac1f21ul,
    0xf73ef40d23339b31ul,
    0x8cd66d96001a9217ul,
    0xc3bb31484834fb63ul,
    0x26985068322e3fd0ul,
    0xeb185d0e03d3758eul,
    0x5b01725ddb1aa60bul,
    0x101a44481cc6077dul,
    0xcc7f4ccdc490b139ul,
    0xfa71ac5787099969ul,
    0x7941b222dcd226abul,
    0x443895ef59ea713aul,
    0xd6b946d788128233ul,
    0x6267c8980e0dad23ul,
    0x7aaaab00d7e3c24eul,
    0x62b4f72086b5c8f6ul,
    0xde4f5041343c0b27ul,
    0x8c7061cd9a0e9441ul,
    0x70f7627c3bba2981ul,
    0xdbf3d8d891318a33ul,
    0x9cf8a9d73c06f05dul,
    0x89c8f86d129e2704ul,
    0xbc1bbed7f4333c09ul,
    0xbe0fc6181feaaa98ul,
    0x18c65db6663cdd02ul,
    0xf238077d33264cd0ul,
    0x68d38b2bc1c2f7b9ul,
    0xd1d6278b91c661dcul,
    0x5b5b321a003c71aeul,
    0xd312169989cc6a49ul,
    0x855dcf214c8551aeul,
    0xa4bd828e0c09a66bul,
    0x8c1f93540e951187ul,
    0x4026e789784cc98ful,
    0x316205eff79f2362ul,
    0x11d74d5963458407ul,
    0x163d19572f1cdb2ful,
    0xc83f1b88d125cd1ul,
    0x4ebfe1343aea02dbul,
    0xe937038cf71211ceul,
    0x78da189ee68cfeceul,
    0xcf2e73d87ecaa063ul,
    0x633d522d01cc9c2cul,
    0x339f8e13c1f36220ul,
    0x4ec872c648076895ul,
    0xadea51d163bc63d2ul,
    0xcb74a725d9930cccul,
    0x8912a918571138aful,
    0x4412a833dc3d01e9ul,
    0xbc9f73668af72947ul,
    0x9b430267ecd5ac97ul,
    0x5b26266b6dcefd0ful,
    0x9388170027f4906bul,
    0xc0c0c8753c95df43ul,
    0xba5798aa82ebf0eful,
    0x2102aa28e715adf3ul,
    0xa0c580a317528e66ul,
    0x39cc7026f629cc5ul,
    0xa1abc7f93305ce0bul,
    0x1e9f4c0585efe527ul,
    0xc55432e905472f3cul,
    0xb8818a9b9729398ul,
    0xa6411a188e57f24ful,
    0xe9e1470413929000ul,
    0x94f713d908182983ul,
    0x45e2c9e4afe61bb3ul,
    0x15312818bf85208aul,
    0x271e88a5225c0f79ul,
    0x8f6219b4c6c47326ul,
    0xc57934952ac32293ul,
    0x79639ffaa606c449ul,
    0x3c69e27c276fe9e9ul,
    0x51c24d2b8171b42bul,
    0x4c6324c4958f0c2ful,
    0x2ccef40af1095988ul,
    0xeacc4abe4f1cc129ul,
    0x62fcae75e412b04bul,
    0xb3ed4c09b966acf8ul,
    0xa63c4346e914364eul,
    0x4b8c9a274a74e24dul,
    0x5dc9f986c4c22130ul,
    0xc87a2f9b70732acful,
    0x4f8e1e996d4d729bul,
    0x2be387145ee4deccul,
    0x7100ffe9f6e8d2e7ul,
    0xf78d98739656041ul,
    0xe618cfb570f0a96ul,
    0xaa3aae9a00f0658ul,
    0x13911939323b2b78ul,
    0x31f801f621e17ad2ul,
    0x75197fd6a3141955ul,
    0x89738c6fe31dd811ul,
    0xc888eda3c74ca1a1ul,
    0x8cb163a4c9d127e0ul,
    0x8e73a4d426d53c10ul,
    0xc9fa380a645d93d0ul,
    0x8a02c23b42cc0be1ul,
    0x5edac0b9373c2aa6ul,
    0x28b3b8cee2d7cbbdul,
    0x458d7750adac016ul,
    0x3d2c5f3ea40ac999ul,
    0xc6ac8afba0b248c1ul,
    0xef03bf6dd953040cul,
    0x5bad8b5bc8fc8575ul,
    0xb76b2c1254cb323cul,
    0xc57563314998387ful,
    0x69a20b1c627b54d4ul,
    0x9c1477657d4ff21ful,
    0x288bb39d7d0f4522ul,
    0x142c7078cc494da2ul,
    0x388f7200ffb4526cul,
    0xb5443d618961eedul,
    0x9facecc17d81051ful,
    0xcb32b23c1cad35a1ul,
    0x4ab417f2458d8152ul,
    0xffeae40d1b5ba1ul,
    0x808e2443570859a2ul,
    0x119428640a1ad1c9ul,
    0x40078111f1d5ca9dul,
    0xc9f9bd713a795e8eul,
    0x9e6d4ed8dfcbec35ul,
    0x82f1431efadace9bul,
    0xd7f72e4c4d00fb41ul,
    0x1f6960c796ec1836ul,
    0xf7208a93797797aaul,
    0xac9aad1cd111d170ul,
    0x876924bca6c2e0bful,
    0x8c2f9a63972d606eul,
    0xab9d2eeac8f4d0a0ul,
    0xad2187c2ba0b05d7ul,
    0x418c41a39e5c1ef1ul,
    0x97881791ac339398ul,
    0xf479f27d3d3512bbul,
    0x1a8c8e9fd965782dul,
    0x8670b835111295b6ul,
    0x5f3b485a3bf10079ul,
    0xd8590068e8994e6eul,
    0x9a03332a9e376e91ul,
    0x553de89c9ab0b563ul,
    0xe78a209f9b15a757ul,
    0x9a82963c7e9cf944ul,
    0x14667a0b0c382291ul,
    0x9d53158c901aa4a9ul,
    0xc14c72be357df380ul,
    0x78b3c6781d4a8714ul,
    0x898c2bd2ec2d2713ul,
    0xc41c314ffa3981b7ul,
    0xeac46a8141cd8ff3ul,
    0x66c515cdd560fd77ul,
    0x576a5f64143176d8ul,
    0x4e28f91a0fab9ca7ul,
    0xef5725c463062d1eul,
    0x379b3518891099acul,
    0xb5916c040f490cbcul,
    0x19d8e9930a2b4d86ul,
    0xe394389d5b513b15ul,
    0xaf1146ef1c30472bul,
    0x1a59f179dd0d77c5ul,
    0xb3dd7e47c4d3eaf0ul,
    0xc5381f111eb45e52ul,
    0x6de1a9f4fb249c7ul,
    0x2ebf9944bc126d24ul,
    0x97c2994edf0c39f2ul,
    0x18aa5b726e67f857ul,
    0x14d980213c596bb0ul,
    0x2f0289a427679f18ul,
    0xa257d624197f6798ul,
    0x31508878a5d842a3ul,
    0x591012b9c9dde932ul,
    0x7a775c1393e54b6dul,
    0x9805dd48c6f8cb37ul,
    0x42b52e3366fd35e0ul,
    0xe84493d82e9b53cul,
    0x74d8002de329f78aul,
    0x7fa09ee471161f72ul,
    0x87be9c4e33713d33ul,
    0x6d5aaae386eb5373ul,
    0x68236e262f66aa6ful,
    0xa449315d7323a22eul,
    0x48f8703e93222593ul,
    0x1c192cab915ad2bul,
    0x9a791920dbd9c96dul,
    0xdaff7fc6de0ee9ul,
    0xaf10000000010108ul,
    0xce35d4547fb38e3eul,
    0xd261929448e67502ul,
    0xd1d00d71de873d1ul,
    0xe63aa0032001c884ul,
    0x9d1c1df6e863640ful,
    0x102500c4ff1f00fful,
    0x200030003000101ul,
    0x101010302ul,
    0x6151413121001101ul,
    0xe1f0d1b1a1918171ul,
    0x1010800dafff1c1ul,
    0x698522c103f0100ul,
    0x6b38052608e80ef4ul,
    0xce6f789b45c491b4ul,
    0x6e862d7425ca45aul,
    0xb593052ded3596bful,
    0xd995bfb9f060df62ul,
    0xc766f085400636b0ul,
    0x7b101a2e3aba00fful,
    0xe02601540bf8e0fdul,
    0x2b45bc322eaaa720ul,
    0x14ae6b4811902735ul,
    0x767a60d3546f719eul,
    0x663068de15ee8d4bul,
    0x4f8d49c5653d78d0ul,
    0xde52ca0c26083846ul,
    0x92a0652717fa79ful,
    0x97b81318ebdffd48ul,
    0x76ac37fa5239c1b8ul,
    0xb35fa87e005afcb2ul,
    0x58f820d928ed9b78ul,
    0x1b481d5a4222b31aul,
    0xc19bc7cdef362804ul,
    0xc39a2f3d4a48321ul,
    0x4f251c521a2c22b9ul,
    0x7448158db9e9bb12ul,
    0xf0294c7d6b88ca40ul,
    0xc37b227fdd81c938ul,
    0x49c62a06ba8d6c4cul,
    0xbca5bf91738c9ab7ul,
    0x7b1ad029589b5454ul,
    0x26bd6e8145ebbc8ul,
    0xf3f82b45de3c7b58ul,
    0x8634355814653b85ul,
    0xa5a2dd2c5793b8cul,
    0x491687f9fa6d56bbul,
    0xa7f3ed7a01cf4f83ul,
    0x4e7e5f6b4b7a477cul,
    0xab8e7a114416d0f9ul,
    0x66fe5a918cfeee5ul,
    0x4bfc30fa0afaa938ul,
    0x84ef5b7d65ed6021ul,
    0xd7c5a74eb2e2656bul,
    0x87a18a8c439e4e2ul,
    0xd68e8c36e36a6e36ul,
    0x688dcbf16567701bul,
    0x319ca40a4f083069ul,
    0x5f839b168e54d447ul,
    0xee356b414745e35eul,
    0x2d1bcd851e5953bul,
    0x262823da9377c773ul,
    0x8454e9c4fd504180ul,
    0x74aa398fd19f0781ul,
    0x95452a11edb229a6ul,
    0xb9a6e0f3314f44b4ul,
    0xaf93b14e71a5a5fdul,
    0x285129883dbdc5dul,
    0x601e75978376c3dul,
    0x784ff207bf06722ful,
    0x5eb3c87c84b8b974ul,
    0x888d96131b2a58b2ul,
    0x1bf990a296c7d5ebul,
    0x1c49cfe2dd00ff09ul,
    0xe0f08fb150c8e800ul,
    0xfe6d3a344861809bul,
    0x783c52327b4b7030ul,
    0x349dbe36e427cff9ul,
    0x8b2449f9ca9df1edul,
    0x36a611b7e140c36bul,
    0x22e0f0e7c0234f25ul,
    0xdedd34a83c82bb2cul,
    0xa86bbd82e960d2dcul,
    0xa0a78d6d19c6d7f8ul,
    0x54e26cf591b42b0ul,
    0x62f45e361a2d7a09ul,
    0xbd559b62439df6ccul,
    0x5d00c4288808d6f9ul,
    0x4d0061711f7ce9a1ul,
    0x520098bdc1de806aul,
    0xb770f45bd0456152ul,
    0x53a8b8392000801bul,
    0xe54812868b317b4ful,
    0x3aa4b9dec0171b79ul,
    0x617f1d7b0a363555ul,
    0x5ea700096d5e21cful,
    0x2c5807f465c47ab8ul,
    0xfdd7bb901f4aa058ul,
    0xeb27a877591d6eacul,
    0x10bd122fc8442813ul,
    0xb7291216567e2d18ul,
    0x4aa0ad3aa9b3c0cdul,
    0x305d1d03bf2607cul,
    0xa01469051613ef7eul,
    0xd90319dc36545fb1ul,
    0x7155aea495959252ul,
    0x762ef914fa838568ul,
    0xe30b3f997f532e14ul,
    0x1fe58f429b720959ul,
    0xfa7898d2fa3bcd7dul,
    0x8dbcb6eb1252e677ul,
    0xaca100cc8ef57ea8ul,
    0x7cb01746df52c227ul,
    0x9311ffdddb4b98ful,
    0x91099d2f50a0b3b1ul,
    0xff7c57546274aful,
    0xbdf34b77c91b598ful,
    0xc3f31b0c150dcdfdul,
    0x7e3651379bf585cful,
    0xad3e18eb2f7faful,
    0x6f3964449735eb3cul,
    0x56b94dec58cf5e7ful,
    0x12fd64cfcef0e8ecul,
    0x2c11436f037a91a6ul,
    0x7b81116303a482aaul,
    0x2dd51bb0764315acul,
    0x52d4035aac701bf4ul,
    0x1d70361c0f34983cul,
    0xd17495f1afafaa20ul,
    0x6102692230df540eul,
    0xfc1af443a0874d7aul,
    0x309e07409db185e7ul,
    0x5ce0a76ea1062448ul,
    0x2cfb035800a88117ul,
    0xaa8a0597ccf3fa3aul,
    0x3a20b7f2c6b9f8c3ul,
    0x69b4f257a17a772aul,
    0x46af5243a55bb925ul,
    0x9ecead8a3161629aul,
    0x7c1d6ae946319f5ful,
    0xd526b123f77ff83dul,
    0xa2a9472fef7ad2bul,
    0x4d0d5800fffab7d7ul,
    0xcc00ff787d9e2a6cul,
    0x7fd9f36850df917aul,
    0x693e9aa437cbad59ul,
    0x9b8f3dd8488b8231ul,
    0x443c2023dd8dd7c0ul,
    0x7222e7115ed3d3d3ul,
    0xf1f57e9756355485ul,
    0xff1005ddd286c1c2ul,
    0xdf5632f20463ea00ul,
    0x1524b149c0ec41a3ul,
    0x6800d62100ff5d07ul,
    0x60621edf3da9c0f4ul,
    0xfcbf780058b99b65ul,
    0x5cd335d045ece970ul,
    0xd1e66916f660f6aeul,
    0xaed1f507d07089e5ul,
    0x3796b4e00ff1ac2ul,
    0xc6247632403681a1ul,
    0xfdf11d858e46d7aaul,
    0xf8d7ac464bd54bbful,
    0xde7ffe3555901e32ul,
    0x321f3dbf7635383dul,
    0xc8c479983d80ce48ul,
    0xbceb719ecf464c55ul,
    0x1c2a83bbbe9ac827ul,
    0xc5dacafad1b0c541ul,
    0x729e0d577d331a05ul,
    0x2300ffd88496b906ul,
    0xd6b0a858693dadbcul,
    0x63132f43d58739ecul,
    0xda62409875b58ebul,
    0x13dc0acbf9cea99aul,
    0xa4cf9cda146a3dcul,
    0x3e00ff6bec52ab05ul,
    0xbe8e270852a55b63ul,
    0x40d1562b37ebdba0ul,
    0xd0d959df1e962daful,
    0xfb235eebe42f682aul,
    0x2c8373413c6cdcaul,
    0x1f689243b833f7acul,
    0xa800c955989dbf60ul,
    0xd946cbc4dbb6d05eul,
    0x2e888224e33f4f1bul,
    0xef9e2768a5a96eeeul,
    0x66e7b73fa0890d2eul,
    0x7ffdd57a93b06435ul,
    0xf1f9e76d168b1518ul,
    0xe534c7944e8d8e8aul,
    0xdc9d63faa9a36845ul,
    0xe3c48b727d7fba6aul,
    0xf492f74f45d04aa0ul,
    0x6ec08dcb679f213cul,
    0xacd953a102da0cf0ul,
    0x50000c1779665737ul,
    0x5b48768793c9ad8bul,
    0x88a8acf52e77c347ul,
    0x321e61442b755110ul,
    0xfebfec00805d00e0ul,
    0x1d31806d448bf9b4ul,
    0x44ed629dbf172c8aul,
    0x62e21ffeea7b9432ul,
    0xf760576ba001af7ul,
    0xe26f50484e843da5ul,
    0x8ae22460e87a3b40ul,
    0x7fa5db5d69449c3ful,
    0xcdea887178ea7124ul,
    0x110e6c4a2e388645ul,
    0x36efcffe31f26213ul,
    0x5f17afc40d0c0de9ul,
    0x21c7e8de9cce1f1bul,
    0xcfe00afb1ed00a84ul,
    0x82e9f72db75697f1ul,
    0xd6bfbe44b4260a61ul,
    0xddd6e5a08d90713ful,
    0xb0e824d45088f1eful,
    0x4042088defd35a10ul,
    0x2bd537b590e2bf4dul,
    0x5e9601b509a455c2ul,
    0x2b900ea3f2436e77ul,
    0x26eea44abef574e2ul,
    0xd31de2b35a536b44ul,
    0x9f80b693586ca8f6ul,
    0x131eadfc4a6e8ca7ul,
    0x39035780791cae45ul,
    0xe701c2140debbfbeul,
    0xc33a6c03000de559ul,
    0xb190646340019508ul,
    0x2ccabb14f48028d2ul,
    0x79044feefb471141ul,
    0x47695d954de3f00ul,
    0xf6b7d19238f6978ful,
    0xe6fc7d75d86b31d6ul,
    0x410774902895ef29ul,
    0x47b6232d8772fe78ul,
    0xa2343913e3fc2780ul,
    0xba1d7095a7b3d29bul,
    0xcc672f8de9b20676ul,
    0x62c04657172d238cul,
    0x689aa91b9831a291ul,
    0x6eb5d2b164917baul,
    0xc834a250a0fc2128ul,
    0x299a20cf116ebd2ul,
    0xe100d4c97b3435baul,
    0xd3717f730ddd7561ul,
    0xbe5bf0d7e38e25c5ul,
    0xfd4905745162c7f9ul,
    0x3726768b4209377ful,
    0x80970ee0aaf507baul,
    0xb88600ff15f37ff3ul,
    0xa6e579e5a30c0daeul,
    0xa60f54019fa886e8ul,
    0xaa02fcf2d4c59de2ul,
    0xa2804d9c60a00ad0ul,
    0xfe4f8e8f765bc687ul,
    0x4cb9fd81be4cce44ul,
    0xb77b1a29b148f595ul,
    0x16b86b8d5a0b8c23ul,
    0xfab74fc11349faf2ul,
    0xf6f2176063a470c9ul,
    0xcd4213630dce5fbaul,
    0x7e112334af9cf0b4ul,
    0xee38a01b97df7313ul,
    0x78ce6deafa40f6d4ul,
    0xe1fa1eab7342240dul,
    0x3c6aee0d3790ca95ul,
    0xd2ac2a6cb6b995d4ul,
    0x75df4b301f24287bul,
    0x688c96b91f7a3c06ul,
    0x3bd977015e64472aul,
    0x7e3b5d5d9723309aul,
    0x8e7ea60d8bc02c97ul,
    0x73c301b17ec4fabeul,
    0x12e15e62ed00ffdeul,
    0x74380e68523b162aul,
    0xd408a6540764a242ul,
    0xfa001e043a17ac55ul,
    0xed06a8806e63e245ul,
    0x900d906e8509754ful,
    0x3b38d6114ffbb088ul,
    0xb8327aeeeb0f4171ul,
    0x569496f99b0c1528ul,
    0xe63dece605e45191ul,
    0xf61087de564af185ul,
    0xaba1017120c7344eul,
    0x9d9a5263da3e9a66ul,
    0x2ee06a340c8a1193ul,
    0x1b87532137f6b44aul,
    0xd0cd2d772b1dc8a8ul,
    0x30037a4f9560d85bul,
    0xbf303feb0ee4e9d0ul,
    0xb47ddb14403287ful,
    0xb96be741218b9269ul,
    0xc16e47639085e37cul,
    0xe28fd24b34886aaaul,
    0x7bc5e4bbbbc3823dul,
    0x557d2bad5108918ul,
    0xa26f21509891384ful,
    0xd5c0604e27a503c7ul,
    0x9d9db5760c476903ul,
    0xb82ac3c82a4a0c6ul,
    0x3c859a488b260146ul,
    0x69d60977771e28ebul,
    0x9aaab4c9caf93bf2ul,
    0x84bd986b8e4f4f43ul,
    0xc2f5f9601b80a543ul,
    0x83eb9fee73b02e5ul,
    0x384257db60a9941cul,
    0xffa6210340599563ul,
    0x97836002f9965e00ul,
    0xa09d66b3992d8debul,
    0x467b805c37a290aul,
    0x601db323e335d48aul,
    0x1bbcb2b45aeb6947ul,
    0x254686582132821ul,
    0x10abc40ed4bce318ul,
    0xa8c98f564b93bc48ul,
    0x92500e8b8a94190ul,
    0x1e415f137b141ful,
    0x43170813d0a10351ul,
    0x546df29c9e4515c0ul,
    0xe0e96d094a9a21a4ul,
    0x42a9621301f91ab3ul,
    0x1060b6ec0a7034e9ul,
    0x90afc85f120557cul,
    0x570ce14476b09864ul,
    0x7756ad0a888a2100ul,
    0x7ab2c83e507d6218ul,
    0x89bbe98c8f799fa2ul,
    0xf9e6749b52f90015ul,
    0xb69a5d84d8420962ul,
    0x7b98aabbc406355cul,
    0xd0675ddb3bc9fb4bul,
    0x37fa429a3bac40d9ul,
    0x93c64314341adc6bul,
    0x20a9cae6c4f8da03ul,
    0x28111b31202f6ed9ul,
    0xdc9afcb8da95750bul,
    0x23519385b60c8978ul,
    0x4eda2891333a2426ul,
    0x28104b00da73390ul,
    0x6897cdd9a48fe850ul,
    0xe1231c04b84f147ul,
    0xb5b1099fd8a24d10ul,
    0x2898e0bbea6a6ea6ul,
    0x1a1118d3ccdb011aul,
    0x269cee1645179bd0ul,
    0xa050ba225125358eul,
    0x3a49476b5ea375bbul,
    0x1fa88f33b8ade6cul,
    0xb8ea533d42291808ul,
    0x6d29000418c96efeul,
    0x8c2d368098ddd1ul,
    0x2afc246b4238c02ul,
    0x90a20f1a294c05d5ul,
    0x4840f96847b4a670ul,
    0x5b40f1d13c81c579ul,
    0x84c46b03a28d2288ul,
    0x4ac392fd4e24f540ul,
    0xccc2478cf06a92a7ul,
    0x6614045a323dd48aul,
    0x337a18964704468dul,
    0xbc7aaf35930e41a1ul,
    0x9a0190bc53830a2dul,
    0xdf38e05fc3bba1e5ul,
    0xca4628960dc26891ul,
    0x10a01b0a69585f88ul,
    0x89f1c7cd120f8e79ul,
    0x862052a4da0a086dul,
    0x6b0a001b66b96460ul,
    0x260850f0b0b9bcbul,
    0x8f23ee2e26fdc85ul,
    0xf205a0ee91dfb201ul,
    0xa185068126d2dc81ul,
    0xb240aa1007947504ul,
    0x6b1c807a00579200ul,
    0x9da65c0d83211de5ul,
    0x684402ab85daa522ul,
    0x1c2ce29ada53674eul,
    0xaabc4f4034237a32ul,
    0x516a655dd44b41e9ul,
    0xbbe9030d511ddc56ul,
    0x6f5a60ab0e0e9815ul,
    0x804867f58de17c67ul,
    0xb1438ac1b78b86a4ul,
    0x460ca7284bda1b8aul,
    0x87ee103450bd41b5ul,
    0xa0c03a01772bc82cul,
    0xdb12c928044f9e00ul,
    0xd58c9abd89360115ul,
    0x76b50ad35243229eul,
    0x15667c6f6173d08aul,
    0xb138aceb3734a01ful,
    0xcabdd1b6b6d1bb35ul,
    0xc483101a8bfda259ul,
    0x423ac00d75c7447eul,
    0x14b4d38ef15136a1ul,
    0xe489d9ecd2111403ul,
    0xa553a8532a10e53aul,
    0x63819a4024855e88ul,
    0x6c03faa64c3c1665ul,
    0x61eee0baaff2491bul,
    0x27d57dba473441e6ul,
    0xa4c75630220cca2aul,
    0xac4082b45e87e5d4ul,
    0xaa893ed0a5796693ul,
    0x726944ad8f8a256cul,
    0x31a85def34026050ul,
    0xf2b6200608a4bb4dul,
    0x9fea29e10841d01bul,
    0x7c6b0d3863550a09ul,
    0x8b54a594a6a7602dul,
    0x41800840169c8919ul,
    0xe811e1481607fee1ul,
    0x5d0713e90ec356d1ul,
    0x6dc036ca06f6d8a0ul,
    0x2d82b474dc9b96c2ul,
    0x222a5d0b27d7b285ul,
    0xccddc2d7098cb49dul,
    0xc5f14277c3e541d0ul,
    0x3a885656826a0134ul,
    0xaa893ed0d9ffaca7ul,

};
const std::size_t data_inputImage_size = 10084;
